{"ast":null,"code":"var _jsxFileName = \"/home/utkarsh/Desktop/jagrukcorona/react-pwa/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { google } from 'googleapis';\nconst googleConfig = {\n  clientId: '916995490002-h4438ccl1o2hth8nk1eipja9ijvo79g6.apps.googleusercontent.com',\n  // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: 'EEWeOXFIARPTJQ3M0X_DM-sb',\n  // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: 'https://me.jc.com/login' // this must match your google api settings\n\n};\n/**\n * Create the google auth object which gives us access to talk to google's apis.\n */\n\nconst defaultScope = ['https://www.googleapis.com/auth/plus.me', 'https://www.googleapis.com/auth/userinfo.email'];\n\nfunction App() {\n  var url = urlGoogle();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, \"Edit  and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link\",\n    href: url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"Sign in with Google\")));\n}\n\nfunction createConnection() {\n  return new google.auth.OAuth2(googleConfig.clientId, googleConfig.clientSecret, googleConfig.redirect);\n}\n\nfunction getConnectionUrl(auth) {\n  return auth.generateAuthUrl({\n    access_type: 'offline',\n    prompt: 'consent',\n    scope: defaultScope\n  });\n}\n\nfunction getGooglePlusApi(auth) {\n  return google.plus({\n    version: 'v1',\n    auth\n  });\n}\n/**********/\n\n/** MAIN **/\n\n/**********/\n\n/**\n * Part 1: Create a Google URL and send to the client to log in the user.\n */\n\n\nfunction urlGoogle() {\n  const auth = createConnection();\n  const url = getConnectionUrl(auth);\n  return url;\n}\n/**\n * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n */\n\n\nasync function getGoogleAccountFromCode(code) {\n  const data = await auth.getToken(code);\n  const tokens = data.tokens;\n  const auth = createConnection();\n  auth.setCredentials(tokens);\n  const plus = getGooglePlusApi(auth);\n  const me = await plus.people.get({\n    userId: 'me'\n  });\n  const userGoogleId = me.data.id;\n  const userGoogleEmail = me.data.emails && me.data.emails.length && me.data.emails[0].value;\n  return {\n    id: userGoogleId,\n    email: userGoogleEmail,\n    tokens: tokens\n  };\n}\n\nexport default App;","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/src/App.js"],"names":["React","google","googleConfig","clientId","clientSecret","redirect","defaultScope","App","url","urlGoogle","logo","createConnection","auth","OAuth2","getConnectionUrl","generateAuthUrl","access_type","prompt","scope","getGooglePlusApi","plus","version","getGoogleAccountFromCode","code","data","getToken","tokens","setCredentials","me","people","get","userId","userGoogleId","id","userGoogleEmail","emails","length","value","email"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { google } from 'googleapis';\n\nconst googleConfig = {\n  clientId: '916995490002-h4438ccl1o2hth8nk1eipja9ijvo79g6.apps.googleusercontent.com', // e.g. asdfghjkljhgfdsghjk.apps.googleusercontent.com\n  clientSecret: 'EEWeOXFIARPTJQ3M0X_DM-sb', // e.g. _ASDFA%DFASDFASDFASD#FAD-\n  redirect: 'https://me.jc.com/login' // this must match your google api settings\n};\n\n/**\n * Create the google auth object which gives us access to talk to google's apis.\n */\n\nconst defaultScope = [\n    'https://www.googleapis.com/auth/plus.me',\n    'https://www.googleapis.com/auth/userinfo.email',\n];\n\n\n\n\nfunction App() {\n  var url=urlGoogle()\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit  and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href= {url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Sign in with Google\n        </a>\n      </header>\n    </div>\n  );\n}\n\n\nfunction createConnection() {\n  return new google.auth.OAuth2(\n    googleConfig.clientId,\n    googleConfig.clientSecret,\n    googleConfig.redirect\n  );\n}\n\nfunction getConnectionUrl(auth) {\n    return auth.generateAuthUrl({\n      access_type: 'offline',\n      prompt: 'consent',\n      scope: defaultScope\n    });\n  }\n  \n  function getGooglePlusApi(auth) {\n    return google.plus({ version: 'v1', auth });\n  }\n  \n  /**********/\n  /** MAIN **/\n  /**********/\n  \n  /**\n   * Part 1: Create a Google URL and send to the client to log in the user.\n   */\n  function urlGoogle() {\n    const auth = createConnection();\n    const url = getConnectionUrl(auth);\n    return url;\n  }\n  \n  /**\n   * Part 2: Take the \"code\" parameter which Google gives us once when the user logs in, then get the user's email and id.\n   */\n  async function getGoogleAccountFromCode(code) {\n    const data = await auth.getToken(code);\n    const tokens = data.tokens;\n    const auth = createConnection();\n    auth.setCredentials(tokens);\n    const plus = getGooglePlusApi(auth);\n    const me = await plus.people.get({ userId: 'me' });\n    const userGoogleId = me.data.id;\n    const userGoogleEmail = me.data.emails && me.data.emails.length && me.data.emails[0].value;\n    return {\n      id: userGoogleId,\n      email: userGoogleEmail,\n      tokens: tokens,\n    };\n  }\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}