{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar appengine_v1alpha;\n\n(function (appengine_v1alpha) {\n  /**\n   * App Engine Admin API\n   *\n   * Provisions and manages developers&#39; App Engine applications.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const appengine = google.appengine('v1alpha');\n   *\n   * @namespace appengine\n   * @type {Function}\n   * @version v1alpha\n   * @variation v1alpha\n   * @param {object=} options Options for Appengine\n   */\n  class Appengine {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.apps = new Resource$Apps(this.context);\n    }\n\n  }\n\n  appengine_v1alpha.Appengine = Appengine;\n\n  class Resource$Apps {\n    constructor(context) {\n      this.context = context;\n      this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n      this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n      this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n      this.locations = new Resource$Apps$Locations(this.context);\n      this.operations = new Resource$Apps$Operations(this.context);\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps = Resource$Apps;\n\n  class Resource$Apps$Authorizedcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'authorizedCertificatesId'],\n        pathParams: ['appsId', 'authorizedCertificatesId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n\n  class Resource$Apps$Authorizeddomains {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n\n  class Resource$Apps$Domainmappings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'domainMappingsId'],\n        pathParams: ['appsId', 'domainMappingsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n\n  class Resource$Apps$Locations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'locationsId'],\n        pathParams: ['appsId', 'locationsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps$Locations = Resource$Apps$Locations;\n\n  class Resource$Apps$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId', 'operationsId'],\n        pathParams: ['appsId', 'operationsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['appsId'],\n        pathParams: ['appsId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  appengine_v1alpha.Resource$Apps$Operations = Resource$Apps$Operations;\n})(appengine_v1alpha = exports.appengine_v1alpha || (exports.appengine_v1alpha = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/appengine/v1alpha.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","appengine_v1alpha","Appengine","constructor","options","google","context","_options","apps","Resource$Apps","authorizedCertificates","Resource$Apps$Authorizedcertificates","authorizedDomains","Resource$Apps$Authorizeddomains","domainMappings","Resource$Apps$Domainmappings","locations","Resource$Apps$Locations","operations","Resource$Apps$Operations","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","delete","get","list","patch"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar appengine_v1alpha;\n(function (appengine_v1alpha) {\n    /**\n     * App Engine Admin API\n     *\n     * Provisions and manages developers&#39; App Engine applications.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const appengine = google.appengine('v1alpha');\n     *\n     * @namespace appengine\n     * @type {Function}\n     * @version v1alpha\n     * @variation v1alpha\n     * @param {object=} options Options for Appengine\n     */\n    class Appengine {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.apps = new Resource$Apps(this.context);\n        }\n    }\n    appengine_v1alpha.Appengine = Appengine;\n    class Resource$Apps {\n        constructor(context) {\n            this.context = context;\n            this.authorizedCertificates = new Resource$Apps$Authorizedcertificates(this.context);\n            this.authorizedDomains = new Resource$Apps$Authorizeddomains(this.context);\n            this.domainMappings = new Resource$Apps$Domainmappings(this.context);\n            this.locations = new Resource$Apps$Locations(this.context);\n            this.operations = new Resource$Apps$Operations(this.context);\n        }\n    }\n    appengine_v1alpha.Resource$Apps = Resource$Apps;\n    class Resource$Apps$Authorizedcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'authorizedCertificatesId'],\n                pathParams: ['appsId', 'authorizedCertificatesId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Authorizedcertificates = Resource$Apps$Authorizedcertificates;\n    class Resource$Apps$Authorizeddomains {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/authorizedDomains').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Authorizeddomains = Resource$Apps$Authorizeddomains;\n    class Resource$Apps$Domainmappings {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/domainMappings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'domainMappingsId'],\n                pathParams: ['appsId', 'domainMappingsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Domainmappings = Resource$Apps$Domainmappings;\n    class Resource$Apps$Locations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/locations/{locationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'locationsId'],\n                pathParams: ['appsId', 'locationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Locations = Resource$Apps$Locations;\n    class Resource$Apps$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/operations/{operationsId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId', 'operationsId'],\n                pathParams: ['appsId', 'operationsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://appengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/apps/{appsId}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['appsId'],\n                pathParams: ['appsId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    appengine_v1alpha.Resource$Apps$Operations = Resource$Apps$Operations;\n})(appengine_v1alpha = exports.appengine_v1alpha || (exports.appengine_v1alpha = {}));\n//# sourceMappingURL=v1alpha.js.map"]},"metadata":{},"sourceType":"script"}