{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar books_v1;\n\n(function (books_v1) {\n  /**\n   * Books API\n   *\n   * Searches for books and manages your Google Books library.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const books = google.books('v1');\n   *\n   * @namespace books\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Books\n   */\n  class Books {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.bookshelves = new Resource$Bookshelves(this.context);\n      this.cloudloading = new Resource$Cloudloading(this.context);\n      this.dictionary = new Resource$Dictionary(this.context);\n      this.familysharing = new Resource$Familysharing(this.context);\n      this.layers = new Resource$Layers(this.context);\n      this.myconfig = new Resource$Myconfig(this.context);\n      this.mylibrary = new Resource$Mylibrary(this.context);\n      this.notification = new Resource$Notification(this.context);\n      this.onboarding = new Resource$Onboarding(this.context);\n      this.personalizedstream = new Resource$Personalizedstream(this.context);\n      this.promooffer = new Resource$Promooffer(this.context);\n      this.series = new Resource$Series(this.context);\n      this.volumes = new Resource$Volumes(this.context);\n    }\n\n  }\n\n  books_v1.Books = Books;\n\n  class Resource$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Bookshelves$Volumes(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Bookshelves = Resource$Bookshelves;\n\n  class Resource$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['userId', 'shelf'],\n        pathParams: ['shelf', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n\n  class Resource$Cloudloading {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateBook(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Cloudloading = Resource$Cloudloading;\n\n  class Resource$Dictionary {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Dictionary = Resource$Dictionary;\n\n  class Resource$Familysharing {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    share(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    unshare(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Familysharing = Resource$Familysharing;\n\n  class Resource$Layers {\n    constructor(context) {\n      this.context = context;\n      this.annotationData = new Resource$Layers$Annotationdata(this.context);\n      this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'summaryId'],\n        pathParams: ['summaryId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers = Resource$Layers;\n\n  class Resource$Layers$Annotationdata {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationDataId', 'contentVersion'],\n        pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n\n  class Resource$Layers$Volumeannotations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'annotationId'],\n        pathParams: ['annotationId', 'layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n        pathParams: ['layerId', 'volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n\n  class Resource$Myconfig {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeIds', 'cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['source', 'volumeId', 'nonce', 'cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['source', 'nonce', 'cpksver'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Myconfig = Resource$Myconfig;\n\n  class Resource$Mylibrary {\n    constructor(context) {\n      this.context = context;\n      this.annotations = new Resource$Mylibrary$Annotations(this.context);\n      this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n      this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary = Resource$Mylibrary;\n\n  class Resource$Mylibrary$Annotations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    summary(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['layerIds', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['annotationId'],\n        pathParams: ['annotationId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n\n  class Resource$Mylibrary$Bookshelves {\n    constructor(context) {\n      this.context = context;\n      this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n    }\n\n    addVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['shelf', 'volumeId'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n\n  class Resource$Mylibrary$Bookshelves$Volumes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['shelf'],\n        pathParams: ['shelf'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n\n  class Resource$Mylibrary$Readingpositions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setPosition(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['volumeId', 'timestamp', 'position'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n\n  class Resource$Notification {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['notification_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Notification = Resource$Notification;\n\n  class Resource$Onboarding {\n    constructor(context) {\n      this.context = context;\n    }\n\n    listCategories(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Onboarding = Resource$Onboarding;\n\n  class Resource$Personalizedstream {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n\n  class Resource$Promooffer {\n    constructor(context) {\n      this.context = context;\n    }\n\n    accept(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    dismiss(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Promooffer = Resource$Promooffer;\n\n  class Resource$Series {\n    constructor(context) {\n      this.context = context;\n      this.membership = new Resource$Series$Membership(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Series = Resource$Series;\n\n  class Resource$Series$Membership {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['series_id'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Series$Membership = Resource$Series$Membership;\n\n  class Resource$Volumes {\n    constructor(context) {\n      this.context = context;\n      this.associated = new Resource$Volumes$Associated(this.context);\n      this.mybooks = new Resource$Volumes$Mybooks(this.context);\n      this.recommended = new Resource$Volumes$Recommended(this.context);\n      this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['q'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes = Resource$Volumes;\n\n  class Resource$Volumes$Associated {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['volumeId'],\n        pathParams: ['volumeId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n\n  class Resource$Volumes$Mybooks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n\n  class Resource$Volumes$Recommended {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    rate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['rating', 'volumeId'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n\n  class Resource$Volumes$Useruploaded {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/books/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","books_v1","Books","constructor","options","google","context","_options","bookshelves","Resource$Bookshelves","cloudloading","Resource$Cloudloading","dictionary","Resource$Dictionary","familysharing","Resource$Familysharing","layers","Resource$Layers","myconfig","Resource$Myconfig","mylibrary","Resource$Mylibrary","notification","Resource$Notification","onboarding","Resource$Onboarding","personalizedstream","Resource$Personalizedstream","promooffer","Resource$Promooffer","series","Resource$Series","volumes","Resource$Volumes","Resource$Bookshelves$Volumes","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","addBook","deleteBook","updateBook","listOfflineMetadata","getFamilyInfo","share","unshare","annotationData","Resource$Layers$Annotationdata","volumeAnnotations","Resource$Layers$Volumeannotations","getUserSettings","releaseDownloadAccess","requestAccess","syncVolumeLicenses","updateUserSettings","annotations","Resource$Mylibrary$Annotations","Resource$Mylibrary$Bookshelves","readingpositions","Resource$Mylibrary$Readingpositions","delete","insert","summary","update","Resource$Mylibrary$Bookshelves$Volumes","addVolume","clearVolumes","moveVolume","removeVolume","setPosition","listCategories","listCategoryVolumes","accept","dismiss","membership","Resource$Series$Membership","associated","Resource$Volumes$Associated","mybooks","Resource$Volumes$Mybooks","recommended","Resource$Volumes$Recommended","useruploaded","Resource$Volumes$Useruploaded","rate"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar books_v1;\n(function (books_v1) {\n    /**\n     * Books API\n     *\n     * Searches for books and manages your Google Books library.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const books = google.books('v1');\n     *\n     * @namespace books\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Books\n     */\n    class Books {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.bookshelves = new Resource$Bookshelves(this.context);\n            this.cloudloading = new Resource$Cloudloading(this.context);\n            this.dictionary = new Resource$Dictionary(this.context);\n            this.familysharing = new Resource$Familysharing(this.context);\n            this.layers = new Resource$Layers(this.context);\n            this.myconfig = new Resource$Myconfig(this.context);\n            this.mylibrary = new Resource$Mylibrary(this.context);\n            this.notification = new Resource$Notification(this.context);\n            this.onboarding = new Resource$Onboarding(this.context);\n            this.personalizedstream = new Resource$Personalizedstream(this.context);\n            this.promooffer = new Resource$Promooffer(this.context);\n            this.series = new Resource$Series(this.context);\n            this.volumes = new Resource$Volumes(this.context);\n        }\n    }\n    books_v1.Books = Books;\n    class Resource$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Bookshelves$Volumes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves = Resource$Bookshelves;\n    class Resource$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/users/{userId}/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['userId', 'shelf'],\n                pathParams: ['shelf', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Bookshelves$Volumes = Resource$Bookshelves$Volumes;\n    class Resource$Cloudloading {\n        constructor(context) {\n            this.context = context;\n        }\n        addBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/addBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/deleteBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateBook(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/cloudloading/updateBook').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Cloudloading = Resource$Cloudloading;\n    class Resource$Dictionary {\n        constructor(context) {\n            this.context = context;\n        }\n        listOfflineMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/dictionary/listOfflineMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Dictionary = Resource$Dictionary;\n    class Resource$Familysharing {\n        constructor(context) {\n            this.context = context;\n        }\n        getFamilyInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/getFamilyInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        share(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/share').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unshare(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/familysharing/unshare').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Familysharing = Resource$Familysharing;\n    class Resource$Layers {\n        constructor(context) {\n            this.context = context;\n            this.annotationData = new Resource$Layers$Annotationdata(this.context);\n            this.volumeAnnotations = new Resource$Layers$Volumeannotations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary/{summaryId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'summaryId'],\n                pathParams: ['summaryId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layersummary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers = Resource$Layers;\n    class Resource$Layers$Annotationdata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [\n                    'volumeId',\n                    'layerId',\n                    'annotationDataId',\n                    'contentVersion',\n                ],\n                pathParams: ['annotationDataId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Annotationdata = Resource$Layers$Annotationdata;\n    class Resource$Layers$Volumeannotations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'annotationId'],\n                pathParams: ['annotationId', 'layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/layers/{layerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'layerId', 'contentVersion'],\n                pathParams: ['layerId', 'volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Layers$Volumeannotations = Resource$Layers$Volumeannotations;\n    class Resource$Myconfig {\n        constructor(context) {\n            this.context = context;\n        }\n        getUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/getUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        releaseDownloadAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/releaseDownloadAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeIds', 'cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        requestAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/requestAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['source', 'volumeId', 'nonce', 'cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        syncVolumeLicenses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/syncVolumeLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['source', 'nonce', 'cpksver'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateUserSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/myconfig/updateUserSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Myconfig = Resource$Myconfig;\n    class Resource$Mylibrary {\n        constructor(context) {\n            this.context = context;\n            this.annotations = new Resource$Mylibrary$Annotations(this.context);\n            this.bookshelves = new Resource$Mylibrary$Bookshelves(this.context);\n            this.readingpositions = new Resource$Mylibrary$Readingpositions(this.context);\n        }\n    }\n    books_v1.Resource$Mylibrary = Resource$Mylibrary;\n    class Resource$Mylibrary$Annotations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        summary(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/summary').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['layerIds', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/annotations/{annotationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['annotationId'],\n                pathParams: ['annotationId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Annotations = Resource$Mylibrary$Annotations;\n    class Resource$Mylibrary$Bookshelves {\n        constructor(context) {\n            this.context = context;\n            this.volumes = new Resource$Mylibrary$Bookshelves$Volumes(this.context);\n        }\n        addVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/addVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clearVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId', 'volumePosition'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeVolume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['shelf', 'volumeId'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves = Resource$Mylibrary$Bookshelves;\n    class Resource$Mylibrary$Bookshelves$Volumes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/bookshelves/{shelf}/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['shelf'],\n                pathParams: ['shelf'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Bookshelves$Volumes = Resource$Mylibrary$Bookshelves$Volumes;\n    class Resource$Mylibrary$Readingpositions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/mylibrary/readingpositions/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPosition(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['volumeId', 'timestamp', 'position'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Mylibrary$Readingpositions = Resource$Mylibrary$Readingpositions;\n    class Resource$Notification {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/notification/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['notification_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Notification = Resource$Notification;\n    class Resource$Onboarding {\n        constructor(context) {\n            this.context = context;\n        }\n        listCategories(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listCategoryVolumes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/onboarding/listCategoryVolumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Onboarding = Resource$Onboarding;\n    class Resource$Personalizedstream {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/personalizedstream/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Personalizedstream = Resource$Personalizedstream;\n    class Resource$Promooffer {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        dismiss(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/dismiss').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/promooffer/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Promooffer = Resource$Promooffer;\n    class Resource$Series {\n        constructor(context) {\n            this.context = context;\n            this.membership = new Resource$Series$Membership(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series = Resource$Series;\n    class Resource$Series$Membership {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/series/membership/get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['series_id'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Series$Membership = Resource$Series$Membership;\n    class Resource$Volumes {\n        constructor(context) {\n            this.context = context;\n            this.associated = new Resource$Volumes$Associated(this.context);\n            this.mybooks = new Resource$Volumes$Mybooks(this.context);\n            this.recommended = new Resource$Volumes$Recommended(this.context);\n            this.useruploaded = new Resource$Volumes$Useruploaded(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['q'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes = Resource$Volumes;\n    class Resource$Volumes$Associated {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/{volumeId}/associated').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['volumeId'],\n                pathParams: ['volumeId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Associated = Resource$Volumes$Associated;\n    class Resource$Volumes$Mybooks {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/mybooks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Mybooks = Resource$Volumes$Mybooks;\n    class Resource$Volumes$Recommended {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/recommended/rate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['rating', 'volumeId'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Recommended = Resource$Volumes$Recommended;\n    class Resource$Volumes$Useruploaded {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/books/v1/volumes/useruploaded').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    books_v1.Resource$Volumes$Useruploaded = Resource$Volumes$Useruploaded;\n})(books_v1 = exports.books_v1 || (exports.books_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}