{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar sheets_v4;\n\n(function (sheets_v4) {\n  /**\n   * Google Sheets API\n   *\n   * Reads and writes Google Sheets.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const sheets = google.sheets('v4');\n   *\n   * @namespace sheets\n   * @type {Function}\n   * @version v4\n   * @variation v4\n   * @param {object=} options Options for Sheets\n   */\n  class Sheets {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.spreadsheets = new Resource$Spreadsheets(this.context);\n    }\n\n  }\n\n  sheets_v4.Sheets = Sheets;\n\n  class Resource$Spreadsheets {\n    constructor(context) {\n      this.context = context;\n      this.developerMetadata = new Resource$Spreadsheets$Developermetadata(this.context);\n      this.sheets = new Resource$Spreadsheets$Sheets(this.context);\n      this.values = new Resource$Spreadsheets$Values(this.context);\n    }\n\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:getByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sheets_v4.Resource$Spreadsheets = Resource$Spreadsheets;\n\n  class Resource$Spreadsheets$Developermetadata {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'metadataId'],\n        pathParams: ['metadataId', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sheets_v4.Resource$Spreadsheets$Developermetadata = Resource$Spreadsheets$Developermetadata;\n\n  class Resource$Spreadsheets$Sheets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    copyTo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'sheetId'],\n        pathParams: ['sheetId', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sheets_v4.Resource$Spreadsheets$Sheets = Resource$Spreadsheets$Sheets;\n\n  class Resource$Spreadsheets$Values {\n    constructor(context) {\n      this.context = context;\n    }\n\n    append(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:append').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'range'],\n        pathParams: ['range', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchClear(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClear').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchClearByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchGet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchGetByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchUpdateByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId'],\n        pathParams: ['spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    clear(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'range'],\n        pathParams: ['range', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'range'],\n        pathParams: ['range', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['spreadsheetId', 'range'],\n        pathParams: ['range', 'spreadsheetId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sheets_v4.Resource$Spreadsheets$Values = Resource$Spreadsheets$Values;\n})(sheets_v4 = exports.sheets_v4 || (exports.sheets_v4 = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/sheets/v4.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","sheets_v4","Sheets","constructor","options","google","context","_options","spreadsheets","Resource$Spreadsheets","developerMetadata","Resource$Spreadsheets$Developermetadata","sheets","Resource$Spreadsheets$Sheets","values","Resource$Spreadsheets$Values","batchUpdate","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","create","get","getByDataFilter","search","copyTo","append","batchClear","batchClearByDataFilter","batchGet","batchGetByDataFilter","batchUpdateByDataFilter","clear","update"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar sheets_v4;\n(function (sheets_v4) {\n    /**\n     * Google Sheets API\n     *\n     * Reads and writes Google Sheets.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const sheets = google.sheets('v4');\n     *\n     * @namespace sheets\n     * @type {Function}\n     * @version v4\n     * @variation v4\n     * @param {object=} options Options for Sheets\n     */\n    class Sheets {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.spreadsheets = new Resource$Spreadsheets(this.context);\n        }\n    }\n    sheets_v4.Sheets = Sheets;\n    class Resource$Spreadsheets {\n        constructor(context) {\n            this.context = context;\n            this.developerMetadata = new Resource$Spreadsheets$Developermetadata(this.context);\n            this.sheets = new Resource$Spreadsheets$Sheets(this.context);\n            this.values = new Resource$Spreadsheets$Values(this.context);\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}:getByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets = Resource$Spreadsheets;\n    class Resource$Spreadsheets$Developermetadata {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'metadataId'],\n                pathParams: ['metadataId', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/developerMetadata:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Developermetadata = Resource$Spreadsheets$Developermetadata;\n    class Resource$Spreadsheets$Sheets {\n        constructor(context) {\n            this.context = context;\n        }\n        copyTo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'sheetId'],\n                pathParams: ['sheetId', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Sheets = Resource$Spreadsheets$Sheets;\n    class Resource$Spreadsheets$Values {\n        constructor(context) {\n            this.context = context;\n        }\n        append(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:append').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchClear(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchClear').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchClearByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchGet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchGet').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchGetByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchUpdateByDataFilter(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId'],\n                pathParams: ['spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clear(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sheets.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v4/spreadsheets/{spreadsheetId}/values/{range}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['spreadsheetId', 'range'],\n                pathParams: ['range', 'spreadsheetId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sheets_v4.Resource$Spreadsheets$Values = Resource$Spreadsheets$Values;\n})(sheets_v4 = exports.sheets_v4 || (exports.sheets_v4 = {}));\n//# sourceMappingURL=v4.js.map"]},"metadata":{},"sourceType":"script"}