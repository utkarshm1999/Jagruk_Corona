{"ast":null,"code":"\"use strict\"; // Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst url = require(\"url\");\n\nconst util = require(\"util\");\n\nconst apirequest_1 = require(\"./apirequest\");\n\nconst endpoint_1 = require(\"./endpoint\");\n\nconst readFile = util.promisify(fs.readFile);\n\nclass Discovery {\n  /**\n   * Discovery for discovering API endpoints\n   *\n   * @param options Options for discovery\n   */\n  constructor(options) {\n    this.transporter = new google_auth_library_1.DefaultTransporter();\n    this.options = options || {};\n  }\n  /**\n   * Generate and Endpoint from an endpoint schema object.\n   *\n   * @param schema The schema from which to generate the Endpoint.\n   * @return A function that creates an endpoint.\n   */\n\n\n  makeEndpoint(schema) {\n    return options => {\n      const ep = new endpoint_1.Endpoint(options);\n      ep.applySchema(ep, schema, schema, ep);\n      return ep;\n    };\n  }\n  /**\n   * Log output of generator. Works just like console.log\n   */\n\n\n  log(...args) {\n    if (this.options && this.options.debug) {\n      console.log(...args);\n    }\n  }\n  /**\n   * Generate all APIs and return as in-memory object.\n   * @param discoveryUrl\n   */\n\n\n  async discoverAllAPIs(discoveryUrl) {\n    const headers = this.options.includePrivate ? {} : {\n      'X-User-Ip': '0.0.0.0'\n    };\n    const res = await this.transporter.request({\n      url: discoveryUrl,\n      headers\n    });\n    const items = res.data.items;\n    const apis = await Promise.all(items.map(async api => {\n      const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n      return {\n        api,\n        endpointCreator\n      };\n    }));\n    const versionIndex = {}; // tslint:disable-next-line no-any\n\n    const apisIndex = {};\n\n    for (const set of apis) {\n      if (!apisIndex[set.api.name]) {\n        versionIndex[set.api.name] = {};\n\n        apisIndex[set.api.name] = options => {\n          const type = typeof options;\n          let version;\n\n          if (type === 'string') {\n            version = options;\n            options = {};\n          } else if (type === 'object') {\n            version = options.version;\n            delete options.version;\n          } else {\n            throw new Error('Argument error: Accepts only string or object');\n          }\n\n          try {\n            const ep = // tslint:disable-next-line: no-any\n            set.endpointCreator(options, this);\n            return Object.freeze(ep); // create new & freeze\n          } catch (e) {\n            throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n          }\n        };\n      }\n\n      versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n    }\n\n    return apisIndex;\n  }\n  /**\n   * Generate API file given discovery URL\n   *\n   * @param apiDiscoveryUrl URL or filename of discovery doc for API\n   * @returns A promise that resolves with a function that creates the endpoint\n   */\n\n\n  async discoverAPI(apiDiscoveryUrl) {\n    if (typeof apiDiscoveryUrl === 'string') {\n      const parts = url.parse(apiDiscoveryUrl);\n\n      if (apiDiscoveryUrl && !parts.protocol) {\n        this.log('Reading from file ' + apiDiscoveryUrl);\n        const file = await readFile(apiDiscoveryUrl, {\n          encoding: 'utf8'\n        });\n        return this.makeEndpoint(JSON.parse(file));\n      } else {\n        this.log('Requesting ' + apiDiscoveryUrl);\n        const res = await this.transporter.request({\n          url: apiDiscoveryUrl\n        });\n        return this.makeEndpoint(res.data);\n      }\n    } else {\n      const options = apiDiscoveryUrl;\n      this.log('Requesting ' + options.url);\n      const url = options.url;\n      delete options.url;\n      const parameters = {\n        options: {\n          url,\n          method: 'GET'\n        },\n        requiredParams: [],\n        pathParams: [],\n        params: options,\n        context: {\n          google: {\n            _options: {}\n          },\n          _options: {}\n        }\n      };\n      const res = await apirequest_1.createAPIRequest(parameters);\n      return this.makeEndpoint(res.data);\n    }\n  }\n\n}\n\nexports.Discovery = Discovery;","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis-common/build/src/discovery.js"],"names":["Object","defineProperty","exports","value","fs","require","google_auth_library_1","url","util","apirequest_1","endpoint_1","readFile","promisify","Discovery","constructor","options","transporter","DefaultTransporter","makeEndpoint","schema","ep","Endpoint","applySchema","log","args","debug","console","discoverAllAPIs","discoveryUrl","headers","includePrivate","res","request","items","data","apis","Promise","all","map","api","endpointCreator","discoverAPI","discoveryRestUrl","versionIndex","apisIndex","set","name","type","version","Error","freeze","e","format","message","apiDiscoveryUrl","parts","parse","protocol","file","encoding","JSON","parameters","method","requiredParams","pathParams","params","context","google","_options","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst url = require(\"url\");\nconst util = require(\"util\");\nconst apirequest_1 = require(\"./apirequest\");\nconst endpoint_1 = require(\"./endpoint\");\nconst readFile = util.promisify(fs.readFile);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */\n    constructor(options) {\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */\n    makeEndpoint(schema) {\n        return (options) => {\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */\n    log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */\n    async discoverAllAPIs(discoveryUrl) {\n        const headers = this.options.includePrivate\n            ? {}\n            : { 'X-User-Ip': '0.0.0.0' };\n        const res = await this.transporter.request({\n            url: discoveryUrl,\n            headers,\n        });\n        const items = res.data.items;\n        const apis = await Promise.all(items.map(async (api) => {\n            const endpointCreator = await this.discoverAPI(api.discoveryRestUrl);\n            return { api, endpointCreator };\n        }));\n        const versionIndex = {};\n        // tslint:disable-next-line no-any\n        const apisIndex = {};\n        for (const set of apis) {\n            if (!apisIndex[set.api.name]) {\n                versionIndex[set.api.name] = {};\n                apisIndex[set.api.name] = (options) => {\n                    const type = typeof options;\n                    let version;\n                    if (type === 'string') {\n                        version = options;\n                        options = {};\n                    }\n                    else if (type === 'object') {\n                        version = options.version;\n                        delete options.version;\n                    }\n                    else {\n                        throw new Error('Argument error: Accepts only string or object');\n                    }\n                    try {\n                        const ep = \n                        // tslint:disable-next-line: no-any\n                        set.endpointCreator(options, this);\n                        return Object.freeze(ep); // create new & freeze\n                    }\n                    catch (e) {\n                        throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                    }\n                };\n            }\n            versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n        }\n        return apisIndex;\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */\n    async discoverAPI(apiDiscoveryUrl) {\n        if (typeof apiDiscoveryUrl === 'string') {\n            const parts = url.parse(apiDiscoveryUrl);\n            if (apiDiscoveryUrl && !parts.protocol) {\n                this.log('Reading from file ' + apiDiscoveryUrl);\n                const file = await readFile(apiDiscoveryUrl, { encoding: 'utf8' });\n                return this.makeEndpoint(JSON.parse(file));\n            }\n            else {\n                this.log('Requesting ' + apiDiscoveryUrl);\n                const res = await this.transporter.request({\n                    url: apiDiscoveryUrl,\n                });\n                return this.makeEndpoint(res.data);\n            }\n        }\n        else {\n            const options = apiDiscoveryUrl;\n            this.log('Requesting ' + options.url);\n            const url = options.url;\n            delete options.url;\n            const parameters = {\n                options: { url, method: 'GET' },\n                requiredParams: [],\n                pathParams: [],\n                params: options,\n                context: { google: { _options: {} }, _options: {} },\n            };\n            const res = await apirequest_1.createAPIRequest(parameters);\n            return this.makeEndpoint(res.data);\n        }\n    }\n}\nexports.Discovery = Discovery;\n//# sourceMappingURL=discovery.js.map"]},"metadata":{},"sourceType":"script"}