{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar adsense_v1_4;\n\n(function (adsense_v1_4) {\n  /**\n   * AdSense Management API\n   *\n   * Accesses AdSense publishers&#39; inventory and generates performance reports.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const adsense = google.adsense('v1.4');\n   *\n   * @namespace adsense\n   * @type {Function}\n   * @version v1.4\n   * @variation v1.4\n   * @param {object=} options Options for Adsense\n   */\n  class Adsense {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.accounts = new Resource$Accounts(this.context);\n      this.adclients = new Resource$Adclients(this.context);\n      this.adunits = new Resource$Adunits(this.context);\n      this.alerts = new Resource$Alerts(this.context);\n      this.customchannels = new Resource$Customchannels(this.context);\n      this.metadata = new Resource$Metadata(this.context);\n      this.payments = new Resource$Payments(this.context);\n      this.reports = new Resource$Reports(this.context);\n      this.savedadstyles = new Resource$Savedadstyles(this.context);\n      this.urlchannels = new Resource$Urlchannels(this.context);\n    }\n\n  }\n\n  adsense_v1_4.Adsense = Adsense;\n\n  class Resource$Accounts {\n    constructor(context) {\n      this.context = context;\n      this.adclients = new Resource$Accounts$Adclients(this.context);\n      this.adunits = new Resource$Accounts$Adunits(this.context);\n      this.alerts = new Resource$Accounts$Alerts(this.context);\n      this.customchannels = new Resource$Accounts$Customchannels(this.context);\n      this.payments = new Resource$Accounts$Payments(this.context);\n      this.reports = new Resource$Accounts$Reports(this.context);\n      this.savedadstyles = new Resource$Accounts$Savedadstyles(this.context);\n      this.urlchannels = new Resource$Accounts$Urlchannels(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts = Resource$Accounts;\n\n  class Resource$Accounts$Adclients {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId'],\n        pathParams: ['accountId', 'adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Adclients = Resource$Accounts$Adclients;\n\n  class Resource$Accounts$Adunits {\n    constructor(context) {\n      this.context = context;\n      this.customchannels = new Resource$Accounts$Adunits$Customchannels(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n        pathParams: ['accountId', 'adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n        pathParams: ['accountId', 'adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId'],\n        pathParams: ['accountId', 'adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Adunits = Resource$Accounts$Adunits;\n\n  class Resource$Accounts$Adunits$Customchannels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n        pathParams: ['accountId', 'adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Adunits$Customchannels = Resource$Accounts$Adunits$Customchannels;\n\n  class Resource$Accounts$Alerts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'alertId'],\n        pathParams: ['accountId', 'alertId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Alerts = Resource$Accounts$Alerts;\n\n  class Resource$Accounts$Customchannels {\n    constructor(context) {\n      this.context = context;\n      this.adunits = new Resource$Accounts$Customchannels$Adunits(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n        pathParams: ['accountId', 'adClientId', 'customChannelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId'],\n        pathParams: ['accountId', 'adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Customchannels = Resource$Accounts$Customchannels;\n\n  class Resource$Accounts$Customchannels$Adunits {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n        pathParams: ['accountId', 'adClientId', 'customChannelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Customchannels$Adunits = Resource$Accounts$Customchannels$Adunits;\n\n  class Resource$Accounts$Payments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Payments = Resource$Accounts$Payments;\n\n  class Resource$Accounts$Reports {\n    constructor(context) {\n      this.context = context;\n      this.saved = new Resource$Accounts$Reports$Saved(this.context);\n    }\n\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'startDate', 'endDate'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Reports = Resource$Accounts$Reports;\n\n  class Resource$Accounts$Reports$Saved {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'savedReportId'],\n        pathParams: ['accountId', 'savedReportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Reports$Saved = Resource$Accounts$Reports$Saved;\n\n  class Resource$Accounts$Savedadstyles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'savedAdStyleId'],\n        pathParams: ['accountId', 'savedAdStyleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId'],\n        pathParams: ['accountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Savedadstyles = Resource$Accounts$Savedadstyles;\n\n  class Resource$Accounts$Urlchannels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['accountId', 'adClientId'],\n        pathParams: ['accountId', 'adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Accounts$Urlchannels = Resource$Accounts$Urlchannels;\n\n  class Resource$Adclients {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Adclients = Resource$Adclients;\n\n  class Resource$Adunits {\n    constructor(context) {\n      this.context = context;\n      this.customchannels = new Resource$Adunits$Customchannels(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Adunits = Resource$Adunits;\n\n  class Resource$Adunits$Customchannels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId', 'adUnitId'],\n        pathParams: ['adClientId', 'adUnitId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Adunits$Customchannels = Resource$Adunits$Customchannels;\n\n  class Resource$Alerts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['alertId'],\n        pathParams: ['alertId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Alerts = Resource$Alerts;\n\n  class Resource$Customchannels {\n    constructor(context) {\n      this.context = context;\n      this.adunits = new Resource$Customchannels$Adunits(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Customchannels = Resource$Customchannels;\n\n  class Resource$Customchannels$Adunits {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId', 'customChannelId'],\n        pathParams: ['adClientId', 'customChannelId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Customchannels$Adunits = Resource$Customchannels$Adunits;\n\n  class Resource$Metadata {\n    constructor(context) {\n      this.context = context;\n      this.dimensions = new Resource$Metadata$Dimensions(this.context);\n      this.metrics = new Resource$Metadata$Metrics(this.context);\n    }\n\n  }\n\n  adsense_v1_4.Resource$Metadata = Resource$Metadata;\n\n  class Resource$Metadata$Dimensions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/metadata/dimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Metadata$Dimensions = Resource$Metadata$Dimensions;\n\n  class Resource$Metadata$Metrics {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/metadata/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Metadata$Metrics = Resource$Metadata$Metrics;\n\n  class Resource$Payments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Payments = Resource$Payments;\n\n  class Resource$Reports {\n    constructor(context) {\n      this.context = context;\n      this.saved = new Resource$Reports$Saved(this.context);\n    }\n\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['startDate', 'endDate'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Reports = Resource$Reports;\n\n  class Resource$Reports$Saved {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['savedReportId'],\n        pathParams: ['savedReportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Reports$Saved = Resource$Reports$Saved;\n\n  class Resource$Savedadstyles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['savedAdStyleId'],\n        pathParams: ['savedAdStyleId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Savedadstyles = Resource$Savedadstyles;\n\n  class Resource$Urlchannels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['adClientId'],\n        pathParams: ['adClientId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  adsense_v1_4.Resource$Urlchannels = Resource$Urlchannels;\n})(adsense_v1_4 = exports.adsense_v1_4 || (exports.adsense_v1_4 = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/adsense/v1.4.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","adsense_v1_4","Adsense","constructor","options","google","context","_options","accounts","Resource$Accounts","adclients","Resource$Adclients","adunits","Resource$Adunits","alerts","Resource$Alerts","customchannels","Resource$Customchannels","metadata","Resource$Metadata","payments","Resource$Payments","reports","Resource$Reports","savedadstyles","Resource$Savedadstyles","urlchannels","Resource$Urlchannels","Resource$Accounts$Adclients","Resource$Accounts$Adunits","Resource$Accounts$Alerts","Resource$Accounts$Customchannels","Resource$Accounts$Payments","Resource$Accounts$Reports","Resource$Accounts$Savedadstyles","Resource$Accounts$Urlchannels","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","getAdCode","Resource$Accounts$Adunits$Customchannels","delete","Resource$Accounts$Customchannels$Adunits","saved","Resource$Accounts$Reports$Saved","generate","Resource$Adunits$Customchannels","Resource$Customchannels$Adunits","dimensions","Resource$Metadata$Dimensions","metrics","Resource$Metadata$Metrics","Resource$Reports$Saved"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar adsense_v1_4;\n(function (adsense_v1_4) {\n    /**\n     * AdSense Management API\n     *\n     * Accesses AdSense publishers&#39; inventory and generates performance reports.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const adsense = google.adsense('v1.4');\n     *\n     * @namespace adsense\n     * @type {Function}\n     * @version v1.4\n     * @variation v1.4\n     * @param {object=} options Options for Adsense\n     */\n    class Adsense {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.accounts = new Resource$Accounts(this.context);\n            this.adclients = new Resource$Adclients(this.context);\n            this.adunits = new Resource$Adunits(this.context);\n            this.alerts = new Resource$Alerts(this.context);\n            this.customchannels = new Resource$Customchannels(this.context);\n            this.metadata = new Resource$Metadata(this.context);\n            this.payments = new Resource$Payments(this.context);\n            this.reports = new Resource$Reports(this.context);\n            this.savedadstyles = new Resource$Savedadstyles(this.context);\n            this.urlchannels = new Resource$Urlchannels(this.context);\n        }\n    }\n    adsense_v1_4.Adsense = Adsense;\n    class Resource$Accounts {\n        constructor(context) {\n            this.context = context;\n            this.adclients = new Resource$Accounts$Adclients(this.context);\n            this.adunits = new Resource$Accounts$Adunits(this.context);\n            this.alerts = new Resource$Accounts$Alerts(this.context);\n            this.customchannels = new Resource$Accounts$Customchannels(this.context);\n            this.payments = new Resource$Accounts$Payments(this.context);\n            this.reports = new Resource$Accounts$Reports(this.context);\n            this.savedadstyles = new Resource$Accounts$Savedadstyles(this.context);\n            this.urlchannels = new Resource$Accounts$Urlchannels(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts = Resource$Accounts;\n    class Resource$Accounts$Adclients {\n        constructor(context) {\n            this.context = context;\n        }\n        getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId'],\n                pathParams: ['accountId', 'adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Adclients = Resource$Accounts$Adclients;\n    class Resource$Accounts$Adunits {\n        constructor(context) {\n            this.context = context;\n            this.customchannels = new Resource$Accounts$Adunits$Customchannels(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n                pathParams: ['accountId', 'adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n                pathParams: ['accountId', 'adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId'],\n                pathParams: ['accountId', 'adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Adunits = Resource$Accounts$Adunits;\n    class Resource$Accounts$Adunits$Customchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId', 'adUnitId'],\n                pathParams: ['accountId', 'adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Adunits$Customchannels = Resource$Accounts$Adunits$Customchannels;\n    class Resource$Accounts$Alerts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'alertId'],\n                pathParams: ['accountId', 'alertId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Alerts = Resource$Accounts$Alerts;\n    class Resource$Accounts$Customchannels {\n        constructor(context) {\n            this.context = context;\n            this.adunits = new Resource$Accounts$Customchannels$Adunits(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n                pathParams: ['accountId', 'adClientId', 'customChannelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId'],\n                pathParams: ['accountId', 'adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Customchannels = Resource$Accounts$Customchannels;\n    class Resource$Accounts$Customchannels$Adunits {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId', 'customChannelId'],\n                pathParams: ['accountId', 'adClientId', 'customChannelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Customchannels$Adunits = Resource$Accounts$Customchannels$Adunits;\n    class Resource$Accounts$Payments {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Payments = Resource$Accounts$Payments;\n    class Resource$Accounts$Reports {\n        constructor(context) {\n            this.context = context;\n            this.saved = new Resource$Accounts$Reports$Saved(this.context);\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'startDate', 'endDate'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Reports = Resource$Accounts$Reports;\n    class Resource$Accounts$Reports$Saved {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'savedReportId'],\n                pathParams: ['accountId', 'savedReportId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Reports$Saved = Resource$Accounts$Reports$Saved;\n    class Resource$Accounts$Savedadstyles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'savedAdStyleId'],\n                pathParams: ['accountId', 'savedAdStyleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/accounts/{accountId}/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId'],\n                pathParams: ['accountId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Savedadstyles = Resource$Accounts$Savedadstyles;\n    class Resource$Accounts$Urlchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/accounts/{accountId}/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['accountId', 'adClientId'],\n                pathParams: ['accountId', 'adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Accounts$Urlchannels = Resource$Accounts$Urlchannels;\n    class Resource$Adclients {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/adclients').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Adclients = Resource$Adclients;\n    class Resource$Adunits {\n        constructor(context) {\n            this.context = context;\n            this.customchannels = new Resource$Adunits$Customchannels(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId', 'adUnitId'],\n                pathParams: ['adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAdCode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/adcode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId', 'adUnitId'],\n                pathParams: ['adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId'],\n                pathParams: ['adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Adunits = Resource$Adunits;\n    class Resource$Adunits$Customchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/adclients/{adClientId}/adunits/{adUnitId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId', 'adUnitId'],\n                pathParams: ['adClientId', 'adUnitId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Adunits$Customchannels = Resource$Adunits$Customchannels;\n    class Resource$Alerts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/alerts/{alertId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['alertId'],\n                pathParams: ['alertId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/alerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Alerts = Resource$Alerts;\n    class Resource$Customchannels {\n        constructor(context) {\n            this.context = context;\n            this.adunits = new Resource$Customchannels$Adunits(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId', 'customChannelId'],\n                pathParams: ['adClientId', 'customChannelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/customchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId'],\n                pathParams: ['adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Customchannels = Resource$Customchannels;\n    class Resource$Customchannels$Adunits {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/adsense/v1.4/adclients/{adClientId}/customchannels/{customChannelId}/adunits').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId', 'customChannelId'],\n                pathParams: ['adClientId', 'customChannelId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Customchannels$Adunits = Resource$Customchannels$Adunits;\n    class Resource$Metadata {\n        constructor(context) {\n            this.context = context;\n            this.dimensions = new Resource$Metadata$Dimensions(this.context);\n            this.metrics = new Resource$Metadata$Metrics(this.context);\n        }\n    }\n    adsense_v1_4.Resource$Metadata = Resource$Metadata;\n    class Resource$Metadata$Dimensions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/metadata/dimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Metadata$Dimensions = Resource$Metadata$Dimensions;\n    class Resource$Metadata$Metrics {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/metadata/metrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Metadata$Metrics = Resource$Metadata$Metrics;\n    class Resource$Payments {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/payments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Payments = Resource$Payments;\n    class Resource$Reports {\n        constructor(context) {\n            this.context = context;\n            this.saved = new Resource$Reports$Saved(this.context);\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['startDate', 'endDate'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Reports = Resource$Reports;\n    class Resource$Reports$Saved {\n        constructor(context) {\n            this.context = context;\n        }\n        generate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/reports/{savedReportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['savedReportId'],\n                pathParams: ['savedReportId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/reports/saved').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Reports$Saved = Resource$Reports$Saved;\n    class Resource$Savedadstyles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/savedadstyles/{savedAdStyleId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['savedAdStyleId'],\n                pathParams: ['savedAdStyleId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/savedadstyles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Savedadstyles = Resource$Savedadstyles;\n    class Resource$Urlchannels {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/adsense/v1.4/adclients/{adClientId}/urlchannels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['adClientId'],\n                pathParams: ['adClientId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    adsense_v1_4.Resource$Urlchannels = Resource$Urlchannels;\n})(adsense_v1_4 = exports.adsense_v1_4 || (exports.adsense_v1_4 = {}));\n//# sourceMappingURL=v1.4.js.map"]},"metadata":{},"sourceType":"script"}