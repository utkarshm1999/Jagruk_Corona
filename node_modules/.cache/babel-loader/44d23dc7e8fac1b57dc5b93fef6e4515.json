{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar compute_alpha;\n\n(function (compute_alpha) {\n  /**\n   * Compute Engine API\n   *\n   * Creates and runs virtual machines on Google Cloud Platform.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const compute = google.compute('alpha');\n   *\n   * @namespace compute\n   * @type {Function}\n   * @version alpha\n   * @variation alpha\n   * @param {object=} options Options for Compute\n   */\n  class Compute {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n      this.addresses = new Resource$Addresses(this.context);\n      this.autoscalers = new Resource$Autoscalers(this.context);\n      this.backendBuckets = new Resource$Backendbuckets(this.context);\n      this.backendServices = new Resource$Backendservices(this.context);\n      this.disks = new Resource$Disks(this.context);\n      this.diskTypes = new Resource$Disktypes(this.context);\n      this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n      this.firewalls = new Resource$Firewalls(this.context);\n      this.forwardingRules = new Resource$Forwardingrules(this.context);\n      this.globalAddresses = new Resource$Globaladdresses(this.context);\n      this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n      this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n      this.globalOperations = new Resource$Globaloperations(this.context);\n      this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n      this.globalPublicDelegatedPrefixes = new Resource$Globalpublicdelegatedprefixes(this.context);\n      this.healthChecks = new Resource$Healthchecks(this.context);\n      this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n      this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n      this.images = new Resource$Images(this.context);\n      this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n      this.instanceGroups = new Resource$Instancegroups(this.context);\n      this.instances = new Resource$Instances(this.context);\n      this.instanceTemplates = new Resource$Instancetemplates(this.context);\n      this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n      this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n      this.interconnects = new Resource$Interconnects(this.context);\n      this.licenseCodes = new Resource$Licensecodes(this.context);\n      this.licenses = new Resource$Licenses(this.context);\n      this.machineImages = new Resource$Machineimages(this.context);\n      this.machineTypes = new Resource$Machinetypes(this.context);\n      this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n      this.networks = new Resource$Networks(this.context);\n      this.nodeGroups = new Resource$Nodegroups(this.context);\n      this.nodeTemplates = new Resource$Nodetemplates(this.context);\n      this.nodeTypes = new Resource$Nodetypes(this.context);\n      this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n      this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n      this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n      this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n      this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n      this.regionCommitments = new Resource$Regioncommitments(this.context);\n      this.regionDisks = new Resource$Regiondisks(this.context);\n      this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n      this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n      this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n      this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n      this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n      this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n      this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n      this.regionOperations = new Resource$Regionoperations(this.context);\n      this.regions = new Resource$Regions(this.context);\n      this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n      this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n      this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n      this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n      this.reservations = new Resource$Reservations(this.context);\n      this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n      this.routers = new Resource$Routers(this.context);\n      this.routes = new Resource$Routes(this.context);\n      this.securityPolicies = new Resource$Securitypolicies(this.context);\n      this.snapshots = new Resource$Snapshots(this.context);\n      this.sslCertificates = new Resource$Sslcertificates(this.context);\n      this.sslPolicies = new Resource$Sslpolicies(this.context);\n      this.subnetworks = new Resource$Subnetworks(this.context);\n      this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n      this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n      this.targetInstances = new Resource$Targetinstances(this.context);\n      this.targetPools = new Resource$Targetpools(this.context);\n      this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n      this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n      this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n      this.urlMaps = new Resource$Urlmaps(this.context);\n      this.vpnGateways = new Resource$Vpngateways(this.context);\n      this.vpnTunnels = new Resource$Vpntunnels(this.context);\n      this.zoneOperations = new Resource$Zoneoperations(this.context);\n      this.zones = new Resource$Zones(this.context);\n    }\n\n  }\n\n  compute_alpha.Compute = Compute;\n\n  class Resource$Acceleratortypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'acceleratorType'],\n        pathParams: ['acceleratorType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n\n  class Resource$Addresses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'address'],\n        pathParams: ['address', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Addresses = Resource$Addresses;\n\n  class Resource$Autoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n\n  class Resource$Backendbuckets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket', 'keyName'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendBucket'],\n        pathParams: ['backendBucket', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n\n  class Resource$Backendservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService', 'keyName'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'backendService'],\n        pathParams: ['backendService', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Backendservices = Resource$Backendservices;\n\n  class Resource$Disks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'disk'],\n        pathParams: ['disk', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Disks = Resource$Disks;\n\n  class Resource$Disktypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'diskType'],\n        pathParams: ['diskType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Disktypes = Resource$Disktypes;\n\n  class Resource$Externalvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'externalVpnGateway'],\n        pathParams: ['externalVpnGateway', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n\n  class Resource$Firewalls {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'firewall'],\n        pathParams: ['firewall', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Firewalls = Resource$Firewalls;\n\n  class Resource$Forwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n\n  class Resource$Globaladdresses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'address'],\n        pathParams: ['address', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n\n  class Resource$Globalforwardingrules {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setTarget(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'forwardingRule'],\n        pathParams: ['forwardingRule', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n\n  class Resource$Globalnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n\n  class Resource$Globaloperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n\n  class Resource$Globalorganizationoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['operation'],\n        pathParams: ['operation'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n\n  class Resource$Globalpublicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n\n  class Resource$Healthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'healthCheck'],\n        pathParams: ['healthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n\n  class Resource$Httphealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpHealthCheck'],\n        pathParams: ['httpHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n\n  class Resource$Httpshealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'httpsHealthCheck'],\n        pathParams: ['httpsHealthCheck', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n\n  class Resource$Images {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deprecate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'image'],\n        pathParams: ['image', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'family'],\n        pathParams: ['family', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Images = Resource$Images;\n\n  class Resource$Instancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n\n  class Resource$Instancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n\n  class Resource$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'accessConfig', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'autoDelete', 'deviceName'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setName(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setTags(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    start(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    suspend(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'instance'],\n        pathParams: ['instance', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instances = Resource$Instances;\n\n  class Resource$Instancetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instanceTemplate'],\n        pathParams: ['instanceTemplate', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n\n  class Resource$Interconnectattachments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'interconnectAttachment'],\n        pathParams: ['interconnectAttachment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n\n  class Resource$Interconnectlocations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnectLocation'],\n        pathParams: ['interconnectLocation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n\n  class Resource$Interconnects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'interconnect'],\n        pathParams: ['interconnect', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Interconnects = Resource$Interconnects;\n\n  class Resource$Licensecodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'licenseCode'],\n        pathParams: ['licenseCode', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n\n  class Resource$Licenses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'license'],\n        pathParams: ['license', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Licenses = Resource$Licenses;\n\n  class Resource$Machineimages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'machineImage'],\n        pathParams: ['machineImage', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Machineimages = Resource$Machineimages;\n\n  class Resource$Machinetypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'machineType'],\n        pathParams: ['machineType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n\n  class Resource$Networkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n\n  class Resource$Networks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addPeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'network'],\n        pathParams: ['network', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Networks = Resource$Networks;\n\n  class Resource$Nodegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'initialNodeCount'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listNodes(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeGroup'],\n        pathParams: ['nodeGroup', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n\n  class Resource$Nodetemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'nodeTemplate'],\n        pathParams: ['nodeTemplate', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n\n  class Resource$Nodetypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'nodeType'],\n        pathParams: ['nodeType', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n\n  class Resource$Organizationsecuritypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    copyRules(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['securityPolicy'],\n        pathParams: ['securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n\n  class Resource$Packetmirrorings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'packetMirroring'],\n        pathParams: ['packetMirroring', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Packetmirrorings = Resource$Packetmirrorings;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setDefaultServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Projects = Resource$Projects;\n\n  class Resource$Publicadvertisedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'publicAdvertisedPrefix'],\n        pathParams: ['project', 'publicAdvertisedPrefix'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n\n  class Resource$Publicdelegatedprefixes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n        pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n\n  class Resource$Regionautoscalers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'autoscaler'],\n        pathParams: ['autoscaler', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n\n  class Resource$Regionbackendservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'backendService'],\n        pathParams: ['backendService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n\n  class Resource$Regioncommitments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'commitment'],\n        pathParams: ['commitment', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n\n  class Resource$Regiondisks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'disk'],\n        pathParams: ['disk', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n\n  class Resource$Regiondisktypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'diskType'],\n        pathParams: ['diskType', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n\n  class Resource$Regionhealthchecks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheck'],\n        pathParams: ['healthCheck', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n\n  class Resource$Regionhealthcheckservices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'healthCheckService'],\n        pathParams: ['healthCheckService', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n\n  class Resource$Regioninstancegroupmanagers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listErrors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroupManager'],\n        pathParams: ['instanceGroupManager', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n\n  class Resource$Regioninstancegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'instanceGroup'],\n        pathParams: ['instanceGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n\n  class Resource$Regionnetworkendpointgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'networkEndpointGroup'],\n        pathParams: ['networkEndpointGroup', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n\n  class Resource$Regionnotificationendpoints {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'notificationEndpoint'],\n        pathParams: ['notificationEndpoint', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n\n  class Resource$Regionoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'operation'],\n        pathParams: ['operation', 'project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n\n  class Resource$Regions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regions = Resource$Regions;\n\n  class Resource$Regionsslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'sslCertificate'],\n        pathParams: ['project', 'region', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n\n  class Resource$Regiontargethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpProxy'],\n        pathParams: ['project', 'region', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n\n  class Resource$Regiontargethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetHttpsProxy'],\n        pathParams: ['project', 'region', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n\n  class Resource$Regionurlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'urlMap'],\n        pathParams: ['project', 'region', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n\n  class Resource$Reservations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'reservation'],\n        pathParams: ['project', 'reservation', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Reservations = Resource$Reservations;\n\n  class Resource$Resourcepolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resourcePolicy'],\n        pathParams: ['project', 'region', 'resourcePolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n\n  class Resource$Routers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    preview(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'router'],\n        pathParams: ['project', 'region', 'router'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Routers = Resource$Routers;\n\n  class Resource$Routes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'route'],\n        pathParams: ['project', 'route'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Routes = Resource$Routes;\n\n  class Resource$Securitypolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patchRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeRule(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'securityPolicy'],\n        pathParams: ['project', 'securityPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n\n  class Resource$Snapshots {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'snapshot'],\n        pathParams: ['project', 'snapshot'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Snapshots = Resource$Snapshots;\n\n  class Resource$Sslcertificates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslCertificate'],\n        pathParams: ['project', 'sslCertificate'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n\n  class Resource$Sslpolicies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'sslPolicy'],\n        pathParams: ['project', 'sslPolicy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n\n  class Resource$Subnetworks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listUsable(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'subnetwork'],\n        pathParams: ['project', 'region', 'subnetwork'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n\n  class Resource$Targethttpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpProxy'],\n        pathParams: ['project', 'targetHttpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n\n  class Resource$Targethttpsproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetHttpsProxy'],\n        pathParams: ['project', 'targetHttpsProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n\n  class Resource$Targetinstances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'targetInstance'],\n        pathParams: ['project', 'targetInstance', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'resource'],\n        pathParams: ['project', 'resource', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n\n  class Resource$Targetpools {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    addInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getHealth(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setBackup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetPool'],\n        pathParams: ['project', 'region', 'targetPool'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetpools = Resource$Targetpools;\n\n  class Resource$Targetsslproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetSslProxy'],\n        pathParams: ['project', 'targetSslProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n\n  class Resource$Targettcpproxies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'targetTcpProxy'],\n        pathParams: ['project', 'targetTcpProxy'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n\n  class Resource$Targetvpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'targetVpnGateway'],\n        pathParams: ['project', 'region', 'targetVpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n\n  class Resource$Urlmaps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'resource'],\n        pathParams: ['project', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'urlMap'],\n        pathParams: ['project', 'urlMap'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n\n  class Resource$Vpngateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getStatus(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnGateway'],\n        pathParams: ['project', 'region', 'vpnGateway'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n\n  class Resource$Vpntunnels {\n    constructor(context) {\n      this.context = context;\n    }\n\n    aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'vpnTunnel'],\n        pathParams: ['project', 'region', 'vpnTunnel'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'region'],\n        pathParams: ['project', 'region'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setLabels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'region', 'resource'],\n        pathParams: ['project', 'region', 'resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n\n  class Resource$Zoneoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone', 'operation'],\n        pathParams: ['operation', 'project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n\n  class Resource$Zones {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'zone'],\n        pathParams: ['project', 'zone'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/compute/alpha/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/compute/alpha.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","compute_alpha","Compute","constructor","options","google","context","_options","acceleratorTypes","Resource$Acceleratortypes","addresses","Resource$Addresses","autoscalers","Resource$Autoscalers","backendBuckets","Resource$Backendbuckets","backendServices","Resource$Backendservices","disks","Resource$Disks","diskTypes","Resource$Disktypes","externalVpnGateways","Resource$Externalvpngateways","firewalls","Resource$Firewalls","forwardingRules","Resource$Forwardingrules","globalAddresses","Resource$Globaladdresses","globalForwardingRules","Resource$Globalforwardingrules","globalNetworkEndpointGroups","Resource$Globalnetworkendpointgroups","globalOperations","Resource$Globaloperations","globalOrganizationOperations","Resource$Globalorganizationoperations","globalPublicDelegatedPrefixes","Resource$Globalpublicdelegatedprefixes","healthChecks","Resource$Healthchecks","httpHealthChecks","Resource$Httphealthchecks","httpsHealthChecks","Resource$Httpshealthchecks","images","Resource$Images","instanceGroupManagers","Resource$Instancegroupmanagers","instanceGroups","Resource$Instancegroups","instances","Resource$Instances","instanceTemplates","Resource$Instancetemplates","interconnectAttachments","Resource$Interconnectattachments","interconnectLocations","Resource$Interconnectlocations","interconnects","Resource$Interconnects","licenseCodes","Resource$Licensecodes","licenses","Resource$Licenses","machineImages","Resource$Machineimages","machineTypes","Resource$Machinetypes","networkEndpointGroups","Resource$Networkendpointgroups","networks","Resource$Networks","nodeGroups","Resource$Nodegroups","nodeTemplates","Resource$Nodetemplates","nodeTypes","Resource$Nodetypes","organizationSecurityPolicies","Resource$Organizationsecuritypolicies","packetMirrorings","Resource$Packetmirrorings","projects","Resource$Projects","publicAdvertisedPrefixes","Resource$Publicadvertisedprefixes","publicDelegatedPrefixes","Resource$Publicdelegatedprefixes","regionAutoscalers","Resource$Regionautoscalers","regionBackendServices","Resource$Regionbackendservices","regionCommitments","Resource$Regioncommitments","regionDisks","Resource$Regiondisks","regionDiskTypes","Resource$Regiondisktypes","regionHealthChecks","Resource$Regionhealthchecks","regionHealthCheckServices","Resource$Regionhealthcheckservices","regionInstanceGroupManagers","Resource$Regioninstancegroupmanagers","regionInstanceGroups","Resource$Regioninstancegroups","regionNetworkEndpointGroups","Resource$Regionnetworkendpointgroups","regionNotificationEndpoints","Resource$Regionnotificationendpoints","regionOperations","Resource$Regionoperations","regions","Resource$Regions","regionSslCertificates","Resource$Regionsslcertificates","regionTargetHttpProxies","Resource$Regiontargethttpproxies","regionTargetHttpsProxies","Resource$Regiontargethttpsproxies","regionUrlMaps","Resource$Regionurlmaps","reservations","Resource$Reservations","resourcePolicies","Resource$Resourcepolicies","routers","Resource$Routers","routes","Resource$Routes","securityPolicies","Resource$Securitypolicies","snapshots","Resource$Snapshots","sslCertificates","Resource$Sslcertificates","sslPolicies","Resource$Sslpolicies","subnetworks","Resource$Subnetworks","targetHttpProxies","Resource$Targethttpproxies","targetHttpsProxies","Resource$Targethttpsproxies","targetInstances","Resource$Targetinstances","targetPools","Resource$Targetpools","targetSslProxies","Resource$Targetsslproxies","targetTcpProxies","Resource$Targettcpproxies","targetVpnGateways","Resource$Targetvpngateways","urlMaps","Resource$Urlmaps","vpnGateways","Resource$Vpngateways","vpnTunnels","Resource$Vpntunnels","zoneOperations","Resource$Zoneoperations","zones","Resource$Zones","aggregatedList","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","delete","insert","setLabels","testIamPermissions","patch","update","addSignedUrlKey","deleteSignedUrlKey","getIamPolicy","setIamPolicy","getHealth","setSecurityPolicy","addResourcePolicies","createSnapshot","removeResourcePolicies","resize","setTarget","attachNetworkEndpoints","detachNetworkEndpoints","listNetworkEndpoints","wait","deprecate","getFromFamily","abandonInstances","applyUpdatesToInstances","createInstances","deleteInstances","deletePerInstanceConfigs","listErrors","listManagedInstances","listPerInstanceConfigs","patchPerInstanceConfigs","recreateInstances","resizeAdvanced","setAutoHealingPolicies","setInstanceTemplate","setTargetPools","updatePerInstanceConfigs","addInstances","listInstances","removeInstances","setNamedPorts","addAccessConfig","attachDisk","deleteAccessConfig","detachDisk","getEffectiveFirewalls","getGuestAttributes","getScreenshot","getSerialPortOutput","getShieldedInstanceIdentity","getShieldedVmIdentity","listReferrers","reset","resume","setDeletionProtection","setDiskAutoDelete","setMachineResources","setMachineType","setMetadata","setMinCpuPlatform","setName","setScheduling","setServiceAccount","setShieldedInstanceIntegrityPolicy","setShieldedVmIntegrityPolicy","setTags","simulateMaintenanceEvent","start","startWithEncryptionKey","stop","suspend","updateAccessConfig","updateDisplayDevice","updateNetworkInterface","updateShieldedInstanceConfig","updateShieldedVmConfig","getDiagnostics","addPeering","listIpAddresses","listIpOwners","listPeeringRoutes","removePeering","switchToCustomMode","updatePeering","addNodes","deleteNodes","listNodes","setNodeTemplate","addAssociation","addRule","copyRules","getAssociation","getRule","listAssociations","move","patchRule","removeAssociation","removeRule","disableXpnHost","disableXpnResource","enableXpnHost","enableXpnResource","getXpnHost","getXpnResources","listXpnHosts","moveDisk","moveInstance","setCommonInstanceMetadata","setDefaultNetworkTier","setDefaultServiceAccount","setUsageExportBucket","updateReservations","setUrlMap","setSslCertificates","invalidateCache","validate","getNatMappingInfo","getRouterStatus","preview","listPreconfiguredExpressionSets","listAvailableFeatures","expandIpCidrRange","listUsable","setPrivateIpGoogleAccess","setQuicOverride","setSslPolicy","addHealthCheck","addInstance","removeHealthCheck","removeInstance","setBackup","setBackendService","setProxyHeader","getStatus"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar compute_alpha;\n(function (compute_alpha) {\n    /**\n     * Compute Engine API\n     *\n     * Creates and runs virtual machines on Google Cloud Platform.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const compute = google.compute('alpha');\n     *\n     * @namespace compute\n     * @type {Function}\n     * @version alpha\n     * @variation alpha\n     * @param {object=} options Options for Compute\n     */\n    class Compute {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.acceleratorTypes = new Resource$Acceleratortypes(this.context);\n            this.addresses = new Resource$Addresses(this.context);\n            this.autoscalers = new Resource$Autoscalers(this.context);\n            this.backendBuckets = new Resource$Backendbuckets(this.context);\n            this.backendServices = new Resource$Backendservices(this.context);\n            this.disks = new Resource$Disks(this.context);\n            this.diskTypes = new Resource$Disktypes(this.context);\n            this.externalVpnGateways = new Resource$Externalvpngateways(this.context);\n            this.firewalls = new Resource$Firewalls(this.context);\n            this.forwardingRules = new Resource$Forwardingrules(this.context);\n            this.globalAddresses = new Resource$Globaladdresses(this.context);\n            this.globalForwardingRules = new Resource$Globalforwardingrules(this.context);\n            this.globalNetworkEndpointGroups = new Resource$Globalnetworkendpointgroups(this.context);\n            this.globalOperations = new Resource$Globaloperations(this.context);\n            this.globalOrganizationOperations = new Resource$Globalorganizationoperations(this.context);\n            this.globalPublicDelegatedPrefixes = new Resource$Globalpublicdelegatedprefixes(this.context);\n            this.healthChecks = new Resource$Healthchecks(this.context);\n            this.httpHealthChecks = new Resource$Httphealthchecks(this.context);\n            this.httpsHealthChecks = new Resource$Httpshealthchecks(this.context);\n            this.images = new Resource$Images(this.context);\n            this.instanceGroupManagers = new Resource$Instancegroupmanagers(this.context);\n            this.instanceGroups = new Resource$Instancegroups(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.instanceTemplates = new Resource$Instancetemplates(this.context);\n            this.interconnectAttachments = new Resource$Interconnectattachments(this.context);\n            this.interconnectLocations = new Resource$Interconnectlocations(this.context);\n            this.interconnects = new Resource$Interconnects(this.context);\n            this.licenseCodes = new Resource$Licensecodes(this.context);\n            this.licenses = new Resource$Licenses(this.context);\n            this.machineImages = new Resource$Machineimages(this.context);\n            this.machineTypes = new Resource$Machinetypes(this.context);\n            this.networkEndpointGroups = new Resource$Networkendpointgroups(this.context);\n            this.networks = new Resource$Networks(this.context);\n            this.nodeGroups = new Resource$Nodegroups(this.context);\n            this.nodeTemplates = new Resource$Nodetemplates(this.context);\n            this.nodeTypes = new Resource$Nodetypes(this.context);\n            this.organizationSecurityPolicies = new Resource$Organizationsecuritypolicies(this.context);\n            this.packetMirrorings = new Resource$Packetmirrorings(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.publicAdvertisedPrefixes = new Resource$Publicadvertisedprefixes(this.context);\n            this.publicDelegatedPrefixes = new Resource$Publicdelegatedprefixes(this.context);\n            this.regionAutoscalers = new Resource$Regionautoscalers(this.context);\n            this.regionBackendServices = new Resource$Regionbackendservices(this.context);\n            this.regionCommitments = new Resource$Regioncommitments(this.context);\n            this.regionDisks = new Resource$Regiondisks(this.context);\n            this.regionDiskTypes = new Resource$Regiondisktypes(this.context);\n            this.regionHealthChecks = new Resource$Regionhealthchecks(this.context);\n            this.regionHealthCheckServices = new Resource$Regionhealthcheckservices(this.context);\n            this.regionInstanceGroupManagers = new Resource$Regioninstancegroupmanagers(this.context);\n            this.regionInstanceGroups = new Resource$Regioninstancegroups(this.context);\n            this.regionNetworkEndpointGroups = new Resource$Regionnetworkendpointgroups(this.context);\n            this.regionNotificationEndpoints = new Resource$Regionnotificationendpoints(this.context);\n            this.regionOperations = new Resource$Regionoperations(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.regionSslCertificates = new Resource$Regionsslcertificates(this.context);\n            this.regionTargetHttpProxies = new Resource$Regiontargethttpproxies(this.context);\n            this.regionTargetHttpsProxies = new Resource$Regiontargethttpsproxies(this.context);\n            this.regionUrlMaps = new Resource$Regionurlmaps(this.context);\n            this.reservations = new Resource$Reservations(this.context);\n            this.resourcePolicies = new Resource$Resourcepolicies(this.context);\n            this.routers = new Resource$Routers(this.context);\n            this.routes = new Resource$Routes(this.context);\n            this.securityPolicies = new Resource$Securitypolicies(this.context);\n            this.snapshots = new Resource$Snapshots(this.context);\n            this.sslCertificates = new Resource$Sslcertificates(this.context);\n            this.sslPolicies = new Resource$Sslpolicies(this.context);\n            this.subnetworks = new Resource$Subnetworks(this.context);\n            this.targetHttpProxies = new Resource$Targethttpproxies(this.context);\n            this.targetHttpsProxies = new Resource$Targethttpsproxies(this.context);\n            this.targetInstances = new Resource$Targetinstances(this.context);\n            this.targetPools = new Resource$Targetpools(this.context);\n            this.targetSslProxies = new Resource$Targetsslproxies(this.context);\n            this.targetTcpProxies = new Resource$Targettcpproxies(this.context);\n            this.targetVpnGateways = new Resource$Targetvpngateways(this.context);\n            this.urlMaps = new Resource$Urlmaps(this.context);\n            this.vpnGateways = new Resource$Vpngateways(this.context);\n            this.vpnTunnels = new Resource$Vpntunnels(this.context);\n            this.zoneOperations = new Resource$Zoneoperations(this.context);\n            this.zones = new Resource$Zones(this.context);\n        }\n    }\n    compute_alpha.Compute = Compute;\n    class Resource$Acceleratortypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'acceleratorType'],\n                pathParams: ['acceleratorType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/acceleratorTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Acceleratortypes = Resource$Acceleratortypes;\n    class Resource$Addresses {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'address'],\n                pathParams: ['address', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Addresses = Resource$Addresses;\n    class Resource$Autoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Autoscalers = Resource$Autoscalers;\n    class Resource$Backendbuckets {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket', 'keyName'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendBuckets/{backendBucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendBucket'],\n                pathParams: ['backendBucket', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendbuckets = Resource$Backendbuckets;\n    class Resource$Backendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        addSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/addSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteSignedUrlKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService', 'keyName'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSecurityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}/setSecurityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'backendService'],\n                pathParams: ['backendService', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Backendservices = Resource$Backendservices;\n    class Resource$Disks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'disk'],\n                pathParams: ['disk', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disks = Resource$Disks;\n    class Resource$Disktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'diskType'],\n                pathParams: ['diskType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Disktypes = Resource$Disktypes;\n    class Resource$Externalvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{externalVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'externalVpnGateway'],\n                pathParams: ['externalVpnGateway', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Externalvpngateways = Resource$Externalvpngateways;\n    class Resource$Firewalls {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/firewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/firewalls/{firewall}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'firewall'],\n                pathParams: ['firewall', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Firewalls = Resource$Firewalls;\n    class Resource$Forwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Forwardingrules = Resource$Forwardingrules;\n    class Resource$Globaladdresses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{address}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'address'],\n                pathParams: ['address', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/addresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/addresses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaladdresses = Resource$Globaladdresses;\n    class Resource$Globalforwardingrules {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTarget(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{forwardingRule}/setTarget').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'forwardingRule'],\n                pathParams: ['forwardingRule', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/forwardingRules/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalforwardingrules = Resource$Globalforwardingrules;\n    class Resource$Globalnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalnetworkendpointgroups = Resource$Globalnetworkendpointgroups;\n    class Resource$Globaloperations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globaloperations = Resource$Globaloperations;\n    class Resource$Globalorganizationoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/locations/global/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['operation'],\n                pathParams: ['operation'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalorganizationoperations = Resource$Globalorganizationoperations;\n    class Resource$Globalpublicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Globalpublicdelegatedprefixes = Resource$Globalpublicdelegatedprefixes;\n    class Resource$Healthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'healthCheck'],\n                pathParams: ['healthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Healthchecks = Resource$Healthchecks;\n    class Resource$Httphealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpHealthChecks/{httpHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpHealthCheck'],\n                pathParams: ['httpHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httphealthchecks = Resource$Httphealthchecks;\n    class Resource$Httpshealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'httpsHealthCheck'],\n                pathParams: ['httpsHealthCheck', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Httpshealthchecks = Resource$Httpshealthchecks;\n    class Resource$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deprecate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}/deprecate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{image}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'image'],\n                pathParams: ['image', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getFromFamily(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/family/{family}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'family'],\n                pathParams: ['family', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/images').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/images/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Images = Resource$Images;\n    class Resource$Instancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resizeAdvanced(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroupmanagers = Resource$Instancegroupmanagers;\n    class Resource$Instancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancegroups = Resource$Instancegroups;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/attachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'accessConfig',\n                    'networkInterface',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/detachDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'deviceName'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getGuestAttributes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getScreenshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/screenshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getSerialPortOutput(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/serialPort').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedInstanceIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getShieldedVmIdentity(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listReferrers(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/referrers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/reset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDeletionProtection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDiskAutoDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [\n                    'project',\n                    'zone',\n                    'instance',\n                    'autoDelete',\n                    'deviceName',\n                ],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMachineType(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMachineType').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setMinCpuPlatform(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setName(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setName').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setScheduling(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setScheduling').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedInstanceIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setShieldedVmIntegrityPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/setTags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        simulateMaintenanceEvent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/start').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startWithEncryptionKey(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        suspend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/suspend').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateAccessConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateDisplayDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateNetworkInterface(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance', 'networkInterface'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedInstanceConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateShieldedVmConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'instance'],\n                pathParams: ['instance', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instances = Resource$Instances;\n    class Resource$Instancetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{instanceTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instanceTemplate'],\n                pathParams: ['instanceTemplate', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/instanceTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Instancetemplates = Resource$Instancetemplates;\n    class Resource$Interconnectattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'interconnectAttachment'],\n                pathParams: ['interconnectAttachment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectattachments = Resource$Interconnectattachments;\n    class Resource$Interconnectlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{interconnectLocation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnectLocation'],\n                pathParams: ['interconnectLocation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnectLocations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnectlocations = Resource$Interconnectlocations;\n    class Resource$Interconnects {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getDiagnostics(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}/getDiagnostics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/interconnects').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{interconnect}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'interconnect'],\n                pathParams: ['interconnect', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/interconnects/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Interconnects = Resource$Interconnects;\n    class Resource$Licensecodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{licenseCode}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'licenseCode'],\n                pathParams: ['licenseCode', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenseCodes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licensecodes = Resource$Licensecodes;\n    class Resource$Licenses {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{license}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'license'],\n                pathParams: ['license', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/licenses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/licenses/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Licenses = Resource$Licenses;\n    class Resource$Machineimages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{machineImage}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'machineImage'],\n                pathParams: ['machineImage', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/machineImages').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/machineImages/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machineimages = Resource$Machineimages;\n    class Resource$Machinetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes/{machineType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'machineType'],\n                pathParams: ['machineType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/machineTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Machinetypes = Resource$Machinetypes;\n    class Resource$Networkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        attachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        detachNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNetworkEndpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networkendpointgroups = Resource$Networkendpointgroups;\n    class Resource$Networks {\n        constructor(context) {\n            this.context = context;\n        }\n        addPeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/addPeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getEffectiveFirewalls(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/getEffectiveFirewalls').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/networks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listIpAddresses(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpAddresses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listIpOwners(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listIpOwners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPeeringRoutes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/listPeeringRoutes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/removePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        switchToCustomMode(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/switchToCustomMode').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePeering(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/networks/{network}/updatePeering').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'network'],\n                pathParams: ['network', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Networks = Resource$Networks;\n    class Resource$Nodegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        addNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'initialNodeCount'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listNodes(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNodeTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeGroup'],\n                pathParams: ['nodeGroup', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodegroups = Resource$Nodegroups;\n    class Resource$Nodetemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'nodeTemplate'],\n                pathParams: ['nodeTemplate', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetemplates = Resource$Nodetemplates;\n    class Resource$Nodetypes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes/{nodeType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'nodeType'],\n                pathParams: ['nodeType', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/nodeTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Nodetypes = Resource$Nodetypes;\n    class Resource$Organizationsecuritypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        copyRules(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/copyRules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAssociations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/listAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeAssociation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeAssociation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/locations/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['securityPolicy'],\n                pathParams: ['securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Organizationsecuritypolicies = Resource$Organizationsecuritypolicies;\n    class Resource$Packetmirrorings {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'packetMirroring'],\n                pathParams: ['packetMirroring', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Packetmirrorings = Resource$Packetmirrorings;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        disableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        disableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/disableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enableXpnResource(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/enableXpnResource').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnHost(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/getXpnHost').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getXpnResources(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/getXpnResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listXpnHosts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/listXpnHosts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveDisk(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveDisk').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        moveInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/moveInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setCommonInstanceMetadata(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setCommonInstanceMetadata').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultNetworkTier(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultNetworkTier').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setDefaultServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/setDefaultServiceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUsageExportBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/setUsageExportBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Projects = Resource$Projects;\n    class Resource$Publicadvertisedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'publicAdvertisedPrefix'],\n                pathParams: ['project', 'publicAdvertisedPrefix'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Publicadvertisedprefixes = Resource$Publicadvertisedprefixes;\n    class Resource$Publicdelegatedprefixes {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'publicDelegatedPrefix'],\n                pathParams: ['project', 'publicDelegatedPrefix', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Publicdelegatedprefixes = Resource$Publicdelegatedprefixes;\n    class Resource$Regionautoscalers {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{autoscaler}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'autoscaler'],\n                pathParams: ['autoscaler', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/autoscalers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionautoscalers = Resource$Regionautoscalers;\n    class Resource$Regionbackendservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/backendServices/{backendService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'backendService'],\n                pathParams: ['backendService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionbackendservices = Resource$Regionbackendservices;\n    class Resource$Regioncommitments {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateReservations(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/commitments/{commitment}/updateReservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'commitment'],\n                pathParams: ['commitment', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioncommitments = Resource$Regioncommitments;\n    class Resource$Regiondisks {\n        constructor(context) {\n            this.context = context;\n        }\n        addResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSnapshot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/createSnapshot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeResourcePolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{disk}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'disk'],\n                pathParams: ['disk', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/disks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisks = Resource$Regiondisks;\n    class Resource$Regiondisktypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes/{diskType}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'diskType'],\n                pathParams: ['diskType', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/diskTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiondisktypes = Resource$Regiondisktypes;\n    class Resource$Regionhealthchecks {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheck'],\n                pathParams: ['healthCheck', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthchecks = Resource$Regionhealthchecks;\n    class Resource$Regionhealthcheckservices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'healthCheckService'],\n                pathParams: ['healthCheckService', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionhealthcheckservices = Resource$Regionhealthcheckservices;\n    class Resource$Regioninstancegroupmanagers {\n        constructor(context) {\n            this.context = context;\n        }\n        abandonInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        applyUpdatesToInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deletePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listErrors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listManagedInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchPerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        recreateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager', 'size'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAutoHealingPolicies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setInstanceTemplate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setTargetPools(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updatePerInstanceConfigs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroupManager'],\n                pathParams: ['instanceGroupManager', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroupmanagers = Resource$Regioninstancegroupmanagers;\n    class Resource$Regioninstancegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setNamedPorts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'instanceGroup'],\n                pathParams: ['instanceGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regioninstancegroups = Resource$Regioninstancegroups;\n    class Resource$Regionnetworkendpointgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'networkEndpointGroup'],\n                pathParams: ['networkEndpointGroup', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/networkEndpointGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnetworkendpointgroups = Resource$Regionnetworkendpointgroups;\n    class Resource$Regionnotificationendpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'notificationEndpoint'],\n                pathParams: ['notificationEndpoint', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionnotificationendpoints = Resource$Regionnotificationendpoints;\n    class Resource$Regionoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'operation'],\n                pathParams: ['operation', 'project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionoperations = Resource$Regionoperations;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/regions/{region}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regions = Resource$Regions;\n    class Resource$Regionsslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'sslCertificate'],\n                pathParams: ['project', 'region', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionsslcertificates = Resource$Regionsslcertificates;\n    class Resource$Regiontargethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpProxy'],\n                pathParams: ['project', 'region', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpproxies = Resource$Regiontargethttpproxies;\n    class Resource$Regiontargethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetHttpsProxy'],\n                pathParams: ['project', 'region', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regiontargethttpsproxies = Resource$Regiontargethttpsproxies;\n    class Resource$Regionurlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'urlMap'],\n                pathParams: ['project', 'region', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Regionurlmaps = Resource$Regionurlmaps;\n    class Resource$Reservations {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{reservation}/resize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'reservation'],\n                pathParams: ['project', 'reservation', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Reservations = Resource$Reservations;\n    class Resource$Resourcepolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resourcePolicy'],\n                pathParams: ['project', 'region', 'resourcePolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Resourcepolicies = Resource$Resourcepolicies;\n    class Resource$Routers {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getNatMappingInfo(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRouterStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/getRouterStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        preview(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}/preview').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/routers/{router}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'router'],\n                pathParams: ['project', 'region', 'router'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routers = Resource$Routers;\n    class Resource$Routes {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{route}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'route'],\n                pathParams: ['project', 'route'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/routes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/routes/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Routes = Resource$Routes;\n    class Resource$Securitypolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        addRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/addRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/getRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listPreconfiguredExpressionSets(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patchRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeRule(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'securityPolicy'],\n                pathParams: ['project', 'securityPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/securityPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Securitypolicies = Resource$Securitypolicies;\n    class Resource$Snapshots {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{snapshot}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'snapshot'],\n                pathParams: ['project', 'snapshot'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/snapshots').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/snapshots/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Snapshots = Resource$Snapshots;\n    class Resource$Sslcertificates {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{sslCertificate}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslCertificate'],\n                pathParams: ['project', 'sslCertificate'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslCertificates/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslcertificates = Resource$Sslcertificates;\n    class Resource$Sslpolicies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/sslPolicies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listAvailableFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/listAvailableFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{sslPolicy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'sslPolicy'],\n                pathParams: ['project', 'sslPolicy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/sslPolicies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Sslpolicies = Resource$Sslpolicies;\n    class Resource$Subnetworks {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        expandIpCidrRange(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listUsable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/subnetworks/listUsable').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setPrivateIpGoogleAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'subnetwork'],\n                pathParams: ['project', 'region', 'subnetwork'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Subnetworks = Resource$Subnetworks;\n    class Resource$Targethttpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{targetHttpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpProxy'],\n                pathParams: ['project', 'targetHttpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpproxies = Resource$Targethttpproxies;\n    class Resource$Targethttpsproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setQuicOverride(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setUrlMap(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetHttpsProxy'],\n                pathParams: ['project', 'targetHttpsProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targethttpsproxies = Resource$Targethttpsproxies;\n    class Resource$Targetinstances {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{targetInstance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'targetInstance'],\n                pathParams: ['project', 'targetInstance', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'resource'],\n                pathParams: ['project', 'resource', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetinstances = Resource$Targetinstances;\n    class Resource$Targetpools {\n        constructor(context) {\n            this.context = context;\n        }\n        addHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        addInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getHealth(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeHealthCheck(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        removeInstance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetPool'],\n                pathParams: ['project', 'region', 'targetPool'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetpools = Resource$Targetpools;\n    class Resource$Targetsslproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslCertificates(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setSslPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetSslProxy'],\n                pathParams: ['project', 'targetSslProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetSslProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetsslproxies = Resource$Targetsslproxies;\n    class Resource$Targettcpproxies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setBackendService(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setProxyHeader(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'targetTcpProxy'],\n                pathParams: ['project', 'targetTcpProxy'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targettcpproxies = Resource$Targettcpproxies;\n    class Resource$Targetvpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'targetVpnGateway'],\n                pathParams: ['project', 'region', 'targetVpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Targetvpngateways = Resource$Targetvpngateways;\n    class Resource$Urlmaps {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/aggregated/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        invalidateCache(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/invalidateCache').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/global/urlMaps').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'resource'],\n                pathParams: ['project', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/global/urlMaps/{urlMap}/validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'urlMap'],\n                pathParams: ['project', 'urlMap'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Urlmaps = Resource$Urlmaps;\n    class Resource$Vpngateways {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStatus(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnGateway'],\n                pathParams: ['project', 'region', 'vpnGateway'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpngateways = Resource$Vpngateways;\n    class Resource$Vpntunnels {\n        constructor(context) {\n            this.context = context;\n        }\n        aggregatedList(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/aggregated/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'vpnTunnel'],\n                pathParams: ['project', 'region', 'vpnTunnel'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'region'],\n                pathParams: ['project', 'region'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setLabels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'region', 'resource'],\n                pathParams: ['project', 'region', 'resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Vpntunnels = Resource$Vpntunnels;\n    class Resource$Zoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/compute/alpha/projects/{project}/zones/{zone}/operations/{operation}/wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone', 'operation'],\n                pathParams: ['operation', 'project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zoneoperations = Resource$Zoneoperations;\n    class Resource$Zones {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones/{zone}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'zone'],\n                pathParams: ['project', 'zone'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://compute.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/compute/alpha/projects/{project}/zones').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    compute_alpha.Resource$Zones = Resource$Zones;\n})(compute_alpha = exports.compute_alpha || (exports.compute_alpha = {}));\n//# sourceMappingURL=alpha.js.map"]},"metadata":{},"sourceType":"script"}