{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar civicinfo_v2;\n\n(function (civicinfo_v2) {\n  /**\n   * Google Civic Information API\n   *\n   * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const civicinfo = google.civicinfo('v2');\n   *\n   * @namespace civicinfo\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Civicinfo\n   */\n  class Civicinfo {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.divisions = new Resource$Divisions(this.context);\n      this.elections = new Resource$Elections(this.context);\n      this.representatives = new Resource$Representatives(this.context);\n    }\n\n  }\n\n  civicinfo_v2.Civicinfo = Civicinfo;\n\n  class Resource$Divisions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/civicinfo/v2/divisions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  civicinfo_v2.Resource$Divisions = Resource$Divisions;\n\n  class Resource$Elections {\n    constructor(context) {\n      this.context = context;\n    }\n\n    electionQuery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/civicinfo/v2/elections').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    voterInfoQuery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/civicinfo/v2/voterinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['address'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  civicinfo_v2.Resource$Elections = Resource$Elections;\n\n  class Resource$Representatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    representativeInfoByAddress(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/civicinfo/v2/representatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    representativeInfoByDivision(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/civicinfo/v2/representatives/{ocdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['ocdId'],\n        pathParams: ['ocdId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  civicinfo_v2.Resource$Representatives = Resource$Representatives;\n})(civicinfo_v2 = exports.civicinfo_v2 || (exports.civicinfo_v2 = {}));","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis/build/src/apis/civicinfo/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","civicinfo_v2","Civicinfo","constructor","options","google","context","_options","divisions","Resource$Divisions","elections","Resource$Elections","representatives","Resource$Representatives","search","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","electionQuery","voterInfoQuery","representativeInfoByAddress","representativeInfoByDivision"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC,C,CACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,YAAJ;;AACA,CAAC,UAAUA,YAAV,EAAwB;AACrB;;;;;;;;;;;;;;;AAeA,QAAMC,SAAN,CAAgB;AACZC,IAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACzB,WAAKC,OAAL,GAAe;AACXC,QAAAA,QAAQ,EAAEH,OAAO,IAAI,EADV;AAEXC,QAAAA;AAFW,OAAf;AAIA,WAAKG,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKH,OAA5B,CAAjB;AACA,WAAKI,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKL,OAA5B,CAAjB;AACA,WAAKM,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAKP,OAAlC,CAAvB;AACH;;AATW;;AAWhBL,EAAAA,YAAY,CAACC,SAAb,GAAyBA,SAAzB;;AACA,QAAMO,kBAAN,CAAyB;AACrBN,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDQ,IAAAA,MAAM,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAIX,OAAO,GAAIY,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAd,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOY,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMe,OAAO,GAAGf,OAAO,CAACe,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfhB,QAAAA,OAAO,EAAET,MAAM,CAAC0B,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,yBAAX,EAAsCI,OAAtC,CAA8C,cAA9C,EAA8D,IAA9D,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNpB,OAHM,CADM;AAKfc,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,EAND;AAOfC,QAAAA,UAAU,EAAE,EAPG;AAQfpB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIW,QAAJ,EAAc;AACVlB,QAAAA,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOlB,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAjCoB;;AAmCzBnB,EAAAA,YAAY,CAACQ,kBAAb,GAAkCA,kBAAlC;;AACA,QAAME,kBAAN,CAAyB;AACrBR,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDsB,IAAAA,aAAa,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACzD,UAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;AAEA,UAAIX,OAAO,GAAIY,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAd,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOY,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMe,OAAO,GAAGf,OAAO,CAACe,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfhB,QAAAA,OAAO,EAAET,MAAM,CAAC0B,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,yBAAX,EAAsCI,OAAtC,CAA8C,cAA9C,EAA8D,IAA9D,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNpB,OAHM,CADM;AAKfc,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,EAND;AAOfC,QAAAA,UAAU,EAAE,EAPG;AAQfpB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIW,QAAJ,EAAc;AACVlB,QAAAA,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOlB,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,cAAc,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC1D,UAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;AAEA,UAAIX,OAAO,GAAIY,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAd,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOY,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMe,OAAO,GAAGf,OAAO,CAACe,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfhB,QAAAA,OAAO,EAAET,MAAM,CAAC0B,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,yBAAX,EAAsCI,OAAtC,CAA8C,cAA9C,EAA8D,IAA9D,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNpB,OAHM,CADM;AAKfc,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,CAAC,SAAD,CAND;AAOfC,QAAAA,UAAU,EAAE,EAPG;AAQfpB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIW,QAAJ,EAAc;AACVlB,QAAAA,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOlB,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAjEoB;;AAmEzBnB,EAAAA,YAAY,CAACU,kBAAb,GAAkCA,kBAAlC;;AACA,QAAME,wBAAN,CAA+B;AAC3BV,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDwB,IAAAA,2BAA2B,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACvE,UAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;AAEA,UAAIX,OAAO,GAAIY,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAd,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOY,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMe,OAAO,GAAGf,OAAO,CAACe,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfhB,QAAAA,OAAO,EAAET,MAAM,CAAC0B,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,+BAAX,EAA4CI,OAA5C,CAAoD,cAApD,EAAoE,IAApE,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNpB,OAHM,CADM;AAKfc,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,EAND;AAOfC,QAAAA,UAAU,EAAE,EAPG;AAQfpB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIW,QAAJ,EAAc;AACVlB,QAAAA,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOlB,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,4BAA4B,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACxE,UAAIC,MAAM,GAAIH,gBAAgB,IAC1B,EADJ;AAEA,UAAIX,OAAO,GAAIY,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAd,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOY,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAZ,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMe,OAAO,GAAGf,OAAO,CAACe,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfhB,QAAAA,OAAO,EAAET,MAAM,CAAC0B,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,uCAAX,EAAoDI,OAApD,CAA4D,cAA5D,EAA4E,IAA5E,CADc;AAEnBC,UAAAA,MAAM,EAAE;AAFW,SAAd,EAGNpB,OAHM,CADM;AAKfc,QAAAA,MALe;AAMfO,QAAAA,cAAc,EAAE,CAAC,OAAD,CAND;AAOfC,QAAAA,UAAU,EAAE,CAAC,OAAD,CAPG;AAQfpB,QAAAA,OAAO,EAAE,KAAKA;AARC,OAAnB;;AAUA,UAAIW,QAAJ,EAAc;AACVlB,QAAAA,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOlB,mBAAmB,CAAC4B,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAjE0B;;AAmE/BnB,EAAAA,YAAY,CAACY,wBAAb,GAAwCA,wBAAxC;AACH,CAxMD,EAwMGZ,YAAY,GAAGJ,OAAO,CAACI,YAAR,KAAyBJ,OAAO,CAACI,YAAR,GAAuB,EAAhD,CAxMlB","sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar civicinfo_v2;\n(function (civicinfo_v2) {\n    /**\n     * Google Civic Information API\n     *\n     * Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const civicinfo = google.civicinfo('v2');\n     *\n     * @namespace civicinfo\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Civicinfo\n     */\n    class Civicinfo {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.divisions = new Resource$Divisions(this.context);\n            this.elections = new Resource$Elections(this.context);\n            this.representatives = new Resource$Representatives(this.context);\n        }\n    }\n    civicinfo_v2.Civicinfo = Civicinfo;\n    class Resource$Divisions {\n        constructor(context) {\n            this.context = context;\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/civicinfo/v2/divisions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    civicinfo_v2.Resource$Divisions = Resource$Divisions;\n    class Resource$Elections {\n        constructor(context) {\n            this.context = context;\n        }\n        electionQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/civicinfo/v2/elections').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        voterInfoQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/civicinfo/v2/voterinfo').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['address'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    civicinfo_v2.Resource$Elections = Resource$Elections;\n    class Resource$Representatives {\n        constructor(context) {\n            this.context = context;\n        }\n        representativeInfoByAddress(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/civicinfo/v2/representatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        representativeInfoByDivision(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/civicinfo/v2/representatives/{ocdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['ocdId'],\n                pathParams: ['ocdId'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    civicinfo_v2.Resource$Representatives = Resource$Representatives;\n})(civicinfo_v2 = exports.civicinfo_v2 || (exports.civicinfo_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}