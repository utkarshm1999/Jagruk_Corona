{"ast":null,"code":"\"use strict\"; // Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst qs = require(\"qs\");\n\nconst stream = require(\"stream\");\n\nconst urlTemplate = require(\"url-template\");\n\nconst uuid = require(\"uuid\");\n\nconst extend = require(\"extend\");\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nconst url_1 = require(\"url\"); // tslint:disable-next-line no-var-requires\n\n\nconst pkg = require('../../package.json');\n\nfunction isReadableStream(obj) {\n  return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\n\nfunction getMissingParams(params, required) {\n  const missing = new Array();\n  required.forEach(param => {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  }); // If there are any required params missing, return their names in array,\n  // otherwise return null\n\n  return missing.length > 0 ? missing : null;\n}\n\nfunction createAPIRequest(parameters, callback) {\n  if (callback) {\n    createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n  } else {\n    return createAPIRequestAsync(parameters);\n  }\n}\n\nexports.createAPIRequest = createAPIRequest;\n\nasync function createAPIRequestAsync(parameters) {\n  const options = Object.assign({}, parameters.options); // Create a new params object so it can no longer be modified from outside\n  // code Also support global and per-client params, but allow them to be\n  // overriden per-request\n\n  const globalParams = parameters.context.google && parameters.context.google._options && parameters.context.google._options.params ? parameters.context.google._options.params : {};\n  const clientParams = parameters.context && parameters.context._options && parameters.context._options.params ? parameters.context._options.params : {};\n  const params = Object.assign({}, // New base object\n  globalParams, // Global params\n  clientParams, // Per-client params\n  parameters.params // API call params\n  ); // Check for user specified user agents at all levels of config\n\n  const userAgentGlobal = parameters.context.google && parameters.context.google._options && parameters.context.google._options.userAgentDirectives ? parameters.context.google._options.userAgentDirectives : [];\n  const userAgentClient = parameters.context && parameters.context._options && parameters.context._options.userAgentDirectives ? parameters.context._options.userAgentDirectives : [];\n  const userAgentDirectives = Object.assign([], userAgentGlobal, userAgentClient, parameters.options.userAgentDirectives) || [];\n  const media = params.media || {};\n  /**\n   * In a previous version of this API, the request body was stuffed in a field\n   * named `resource`.  This caused lots of problems, because it's not uncommon\n   * to have an actual named parameter required which is also named `resource`.\n   * This meant that users would have to use `resource_` in those cases, which\n   * pretty much nobody figures out on their own. The request body is now\n   * documented as being in the `requestBody` property, but we also need to keep\n   * using `resource` for reasons of back-compat. Cases that need to be covered\n   * here:\n   * - user provides just a `resource` with a request body\n   * - user provides both a `resource` and a `resource_`\n   * - user provides just a `requestBody`\n   * - user provides both a `requestBody` and a `resource`\n   */\n\n  let resource = params.requestBody;\n\n  if (!params.requestBody && params.resource && (!parameters.requiredParams.includes('resource') || typeof params.resource !== 'string')) {\n    resource = params.resource;\n    delete params.resource;\n  }\n\n  delete params.requestBody;\n  let authClient = params.auth || parameters.context._options.auth || (parameters.context.google ? parameters.context.google._options.auth : null);\n  const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n  delete params.media;\n  delete params.auth; // Grab headers from user provided options\n\n  const headers = params.headers || {};\n  populateAPIHeader(headers);\n  delete params.headers; // Un-alias parameters that were modified due to conflicts with reserved names\n\n  Object.keys(params).forEach(key => {\n    if (key.slice(-1) === '_') {\n      const newKey = key.slice(0, -1);\n      params[newKey] = params[key];\n      delete params[key];\n    }\n  }); // Check for missing required parameters in the API request\n\n  const missingParams = getMissingParams(params, parameters.requiredParams);\n\n  if (missingParams) {\n    // Some params are missing - stop further operations and inform the\n    // developer which required params are not included in the request\n    throw new Error('Missing required parameters: ' + missingParams.join(', '));\n  } // Parse urls\n\n\n  if (options.url) {\n    options.url = urlTemplate.parse(options.url).expand(params);\n  }\n\n  if (parameters.mediaUrl) {\n    parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n  } // Rewrite url if rootUrl is globally set\n\n\n  if (parameters.context._options.rootUrl !== undefined && options.url !== undefined) {\n    const path = options.url.slice(parameters.context._options.rootUrl.length);\n    options.url = url_1.resolve(parameters.context._options.rootUrl, path);\n  } // When forming the querystring, override the serializer so that array\n  // values are serialized like this:\n  // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n  // This serializer also encodes spaces in the querystring as `%20`,\n  // whereas the default serializer in gaxios encodes to a `+`.\n\n\n  options.paramsSerializer = params => {\n    return qs.stringify(params, {\n      arrayFormat: 'repeat'\n    });\n  }; // delete path parameters from the params object so they do not end up in\n  // query\n\n\n  parameters.pathParams.forEach(param => {\n    delete params[param];\n\n    if (parameters.context && parameters.context._options && parameters.context._options.params) {\n      delete parameters.context._options.params[param];\n    }\n  }); // if authClient is actually a string, use it as an API KEY\n\n  if (typeof authClient === 'string') {\n    params.key = params.key || authClient;\n    authClient = undefined;\n  }\n\n  if (parameters.mediaUrl && media.body) {\n    options.url = parameters.mediaUrl;\n\n    if (resource) {\n      // gaxios doesn't support multipart/related uploads, so it has to\n      // be implemented here.\n      params.uploadType = 'multipart';\n      const multipart = [{\n        'Content-Type': 'application/json',\n        body: JSON.stringify(resource)\n      }, {\n        'Content-Type': media.mimeType || resource && resource.mimeType || defaultMime,\n        body: media.body\n      }];\n      const boundary = uuid.v4();\n      const finale = `--${boundary}--`;\n      const rStream = new stream.PassThrough({\n        flush(callback) {\n          this.push('\\r\\n');\n          this.push(finale);\n          callback();\n        }\n\n      });\n      const pStream = new ProgressStream();\n      const isStream = isReadableStream(multipart[1].body);\n      headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n\n      for (const part of multipart) {\n        const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n        rStream.push(preamble);\n\n        if (typeof part.body === 'string') {\n          rStream.push(part.body);\n          rStream.push('\\r\\n');\n        } else {\n          // Gaxios does not natively support onUploadProgress in node.js.\n          // Pipe through the pStream first to read the number of bytes read\n          // for the purpose of tracking progress.\n          pStream.on('progress', bytesRead => {\n            if (options.onUploadProgress) {\n              options.onUploadProgress({\n                bytesRead\n              });\n            }\n          });\n          part.body.pipe(pStream).pipe(rStream);\n        }\n      }\n\n      if (!isStream) {\n        rStream.push(finale);\n        rStream.push(null);\n      }\n\n      options.data = rStream;\n    } else {\n      params.uploadType = 'media';\n      Object.assign(headers, {\n        'Content-Type': media.mimeType || defaultMime\n      });\n      options.data = media.body;\n    }\n  } else {\n    options.data = resource || undefined;\n  }\n\n  options.headers = extend(true, options.headers || {}, headers);\n  options.params = params;\n\n  if (!isbrowser_1.isBrowser()) {\n    options.headers['Accept-Encoding'] = 'gzip';\n    userAgentDirectives.push({\n      product: 'google-api-nodejs-client',\n      version: pkg.version,\n      comment: 'gzip'\n    });\n    const userAgent = userAgentDirectives.map(d => {\n      let line = `${d.product}/${d.version}`;\n\n      if (d.comment) {\n        line += ` (${d.comment})`;\n      }\n\n      return line;\n    }).join(' ');\n    options.headers['User-Agent'] = userAgent;\n  } // By default gaxios treats any 2xx as valid, and all non 2xx status\n  // codes as errors.  This is a problem for HTTP 304s when used along\n  // with an eTag.\n\n\n  if (!options.validateStatus) {\n    options.validateStatus = status => {\n      return status >= 200 && status < 300 || status === 304;\n    };\n  } // Retry by default\n\n\n  options.retry = options.retry === undefined ? true : options.retry; // Combine the GaxiosOptions options passed with this specific\n  // API call witht the global options configured at the API Context\n  // level, or at the global level.\n\n  const mergedOptions = extend(true, {}, parameters.context.google ? parameters.context.google._options : {}, parameters.context._options, options);\n  delete mergedOptions.auth; // is overridden by our auth code\n  // Perform the HTTP request.  NOTE: this function used to return a\n  // mikeal/request object. Since the transition to Axios, the method is\n  // now void.  This may be a source of confusion for users upgrading from\n  // version 24.0 -> 25.0 or up.\n\n  if (authClient && typeof authClient === 'object') {\n    return authClient.request(mergedOptions);\n  } else {\n    return new google_auth_library_1.DefaultTransporter().request(mergedOptions);\n  }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\n\n\nclass ProgressStream extends stream.Transform {\n  constructor() {\n    super(...arguments);\n    this.bytesRead = 0;\n  } // tslint:disable-next-line: no-any\n\n\n  _transform(chunk, encoding, callback) {\n    this.bytesRead += chunk.length;\n    this.emit('progress', this.bytesRead);\n    this.push(chunk);\n    callback();\n  }\n\n}\n\nfunction populateAPIHeader(headers) {\n  // TODO: we should eventually think about adding browser support for this\n  // populating the gl-web header (web support should also be added to\n  // google-auth-library-nodejs).\n  if (!isbrowser_1.isBrowser()) {\n    headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n  }\n}","map":{"version":3,"sources":["/home/utkarsh/Desktop/jagrukcorona/react-pwa/node_modules/googleapis-common/build/src/apirequest.js"],"names":["Object","defineProperty","exports","value","google_auth_library_1","require","qs","stream","urlTemplate","uuid","extend","isbrowser_1","url_1","pkg","isReadableStream","obj","Readable","_read","getMissingParams","params","required","missing","Array","forEach","param","undefined","push","length","createAPIRequest","parameters","callback","createAPIRequestAsync","then","r","options","assign","globalParams","context","google","_options","clientParams","userAgentGlobal","userAgentDirectives","userAgentClient","media","resource","requestBody","requiredParams","includes","authClient","auth","defaultMime","body","headers","populateAPIHeader","keys","key","slice","newKey","missingParams","Error","join","url","parse","expand","mediaUrl","rootUrl","path","resolve","paramsSerializer","stringify","arrayFormat","pathParams","uploadType","multipart","JSON","mimeType","boundary","v4","finale","rStream","PassThrough","flush","pStream","ProgressStream","isStream","part","preamble","on","bytesRead","onUploadProgress","pipe","data","isBrowser","product","version","comment","userAgent","map","d","line","validateStatus","status","retry","mergedOptions","request","DefaultTransporter","Transform","constructor","arguments","_transform","chunk","encoding","emit","process","versions","node"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst extend = require(\"extend\");\nconst isbrowser_1 = require(\"./isbrowser\");\nconst url_1 = require(\"url\");\n// tslint:disable-next-line no-var-requires\nconst pkg = require('../../package.json');\nfunction isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nasync function createAPIRequestAsync(parameters) {\n    const options = Object.assign({}, parameters.options);\n    // Create a new params object so it can no longer be modified from outside\n    // code Also support global and per-client params, but allow them to be\n    // overriden per-request\n    const globalParams = parameters.context.google &&\n        parameters.context.google._options &&\n        parameters.context.google._options.params\n        ? parameters.context.google._options.params\n        : {};\n    const clientParams = parameters.context &&\n        parameters.context._options &&\n        parameters.context._options.params\n        ? parameters.context._options.params\n        : {};\n    const params = Object.assign({}, // New base object\n    globalParams, // Global params\n    clientParams, // Per-client params\n    parameters.params // API call params\n    );\n    // Check for user specified user agents at all levels of config\n    const userAgentGlobal = parameters.context.google &&\n        parameters.context.google._options &&\n        parameters.context.google._options.userAgentDirectives\n        ? parameters.context.google._options.userAgentDirectives\n        : [];\n    const userAgentClient = parameters.context &&\n        parameters.context._options &&\n        parameters.context._options.userAgentDirectives\n        ? parameters.context._options.userAgentDirectives\n        : [];\n    const userAgentDirectives = Object.assign([], userAgentGlobal, userAgentClient, parameters.options.userAgentDirectives) || [];\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This meant that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n    let resource = params.requestBody;\n    if (!params.requestBody &&\n        params.resource &&\n        (!parameters.requiredParams.includes('resource') ||\n            typeof params.resource !== 'string')) {\n        resource = params.resource;\n        delete params.resource;\n    }\n    delete params.requestBody;\n    let authClient = params.auth ||\n        parameters.context._options.auth ||\n        (parameters.context.google\n            ? parameters.context.google._options.auth\n            : null);\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth;\n    // Grab headers from user provided options\n    const headers = params.headers || {};\n    populateAPIHeader(headers);\n    delete params.headers;\n    // Un-alias parameters that were modified due to conflicts with reserved names\n    Object.keys(params).forEach(key => {\n        if (key.slice(-1) === '_') {\n            const newKey = key.slice(0, -1);\n            params[newKey] = params[key];\n            delete params[key];\n        }\n    });\n    // Check for missing required parameters in the API request\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n    if (missingParams) {\n        // Some params are missing - stop further operations and inform the\n        // developer which required params are not included in the request\n        throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    }\n    // Parse urls\n    if (options.url) {\n        options.url = urlTemplate.parse(options.url).expand(params);\n    }\n    if (parameters.mediaUrl) {\n        parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    }\n    // Rewrite url if rootUrl is globally set\n    if (parameters.context._options.rootUrl !== undefined &&\n        options.url !== undefined) {\n        const path = options.url.slice(parameters.context._options.rootUrl.length);\n        options.url = url_1.resolve(parameters.context._options.rootUrl, path);\n    }\n    // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n    options.paramsSerializer = params => {\n        return qs.stringify(params, { arrayFormat: 'repeat' });\n    };\n    // delete path parameters from the params object so they do not end up in\n    // query\n    parameters.pathParams.forEach(param => {\n        delete params[param];\n        if (parameters.context &&\n            parameters.context._options &&\n            parameters.context._options.params) {\n            delete parameters.context._options.params[param];\n        }\n    });\n    // if authClient is actually a string, use it as an API KEY\n    if (typeof authClient === 'string') {\n        params.key = params.key || authClient;\n        authClient = undefined;\n    }\n    if (parameters.mediaUrl && media.body) {\n        options.url = parameters.mediaUrl;\n        if (resource) {\n            // gaxios doesn't support multipart/related uploads, so it has to\n            // be implemented here.\n            params.uploadType = 'multipart';\n            const multipart = [\n                { 'Content-Type': 'application/json', body: JSON.stringify(resource) },\n                {\n                    'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                    body: media.body,\n                },\n            ];\n            const boundary = uuid.v4();\n            const finale = `--${boundary}--`;\n            const rStream = new stream.PassThrough({\n                flush(callback) {\n                    this.push('\\r\\n');\n                    this.push(finale);\n                    callback();\n                },\n            });\n            const pStream = new ProgressStream();\n            const isStream = isReadableStream(multipart[1].body);\n            headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n            for (const part of multipart) {\n                const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n                rStream.push(preamble);\n                if (typeof part.body === 'string') {\n                    rStream.push(part.body);\n                    rStream.push('\\r\\n');\n                }\n                else {\n                    // Gaxios does not natively support onUploadProgress in node.js.\n                    // Pipe through the pStream first to read the number of bytes read\n                    // for the purpose of tracking progress.\n                    pStream.on('progress', bytesRead => {\n                        if (options.onUploadProgress) {\n                            options.onUploadProgress({ bytesRead });\n                        }\n                    });\n                    part.body.pipe(pStream).pipe(rStream);\n                }\n            }\n            if (!isStream) {\n                rStream.push(finale);\n                rStream.push(null);\n            }\n            options.data = rStream;\n        }\n        else {\n            params.uploadType = 'media';\n            Object.assign(headers, { 'Content-Type': media.mimeType || defaultMime });\n            options.data = media.body;\n        }\n    }\n    else {\n        options.data = resource || undefined;\n    }\n    options.headers = extend(true, options.headers || {}, headers);\n    options.params = params;\n    if (!isbrowser_1.isBrowser()) {\n        options.headers['Accept-Encoding'] = 'gzip';\n        userAgentDirectives.push({\n            product: 'google-api-nodejs-client',\n            version: pkg.version,\n            comment: 'gzip',\n        });\n        const userAgent = userAgentDirectives\n            .map(d => {\n            let line = `${d.product}/${d.version}`;\n            if (d.comment) {\n                line += ` (${d.comment})`;\n            }\n            return line;\n        })\n            .join(' ');\n        options.headers['User-Agent'] = userAgent;\n    }\n    // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n    if (!options.validateStatus) {\n        options.validateStatus = status => {\n            return (status >= 200 && status < 300) || status === 304;\n        };\n    }\n    // Retry by default\n    options.retry = options.retry === undefined ? true : options.retry;\n    // Combine the GaxiosOptions options passed with this specific\n    // API call witht the global options configured at the API Context\n    // level, or at the global level.\n    const mergedOptions = extend(true, {}, parameters.context.google ? parameters.context.google._options : {}, parameters.context._options, options);\n    delete mergedOptions.auth; // is overridden by our auth code\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n    if (authClient && typeof authClient === 'object') {\n        return authClient.request(mergedOptions);\n    }\n    else {\n        return new google_auth_library_1.DefaultTransporter().request(mergedOptions);\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // tslint:disable-next-line: no-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\nfunction populateAPIHeader(headers) {\n    // TODO: we should eventually think about adding browser support for this\n    // populating the gl-web header (web support should also be added to\n    // google-auth-library-nodejs).\n    if (!isbrowser_1.isBrowser()) {\n        headers['x-goog-api-client'] = `gdcl/${pkg.version} gl-node/${process.versions.node}`;\n    }\n}\n//# sourceMappingURL=apirequest.js.map"]},"metadata":{},"sourceType":"script"}